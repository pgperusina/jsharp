/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,12],$V2=[1,15],$V3=[1,24],$V4=[1,16],$V5=[1,17],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,18],$Vb=[1,19],$Vc=[1,20],$Vd=[1,21],$Ve=[1,22],$Vf=[2,5,15,24,25,27,28,32,33,34,35,37,43,44,47,49,50,51,52],$Vg=[25,30],$Vh=[1,47],$Vi=[21,25,30,36],$Vj=[8,17],$Vk=[8,39],$Vl=[8,17,21,39],$Vm=[1,60],$Vn=[1,63],$Vo=[1,54],$Vp=[1,55],$Vq=[1,56],$Vr=[1,57],$Vs=[1,58],$Vt=[1,59],$Vu=[1,61],$Vv=[1,62],$Vw=[1,79],$Vx=[1,80],$Vy=[1,81],$Vz=[1,82],$VA=[1,83],$VB=[1,84],$VC=[1,85],$VD=[1,86],$VE=[1,87],$VF=[1,88],$VG=[1,89],$VH=[1,90],$VI=[1,91],$VJ=[1,92],$VK=[1,93],$VL=[1,94],$VM=[1,95],$VN=[1,96],$VO=[8,39,48,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],$VP=[2,75],$VQ=[8,39,48,56,57,58,59,64,65,66,67,68,69,70,71,72,73],$VR=[8,39,48,56,57,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73],$VS=[8,39,48,56,57,64,65,66,71,72,73],$VT=[1,135],$VU=[1,136],$VV=[43,47,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"instrucciones":4,"EOF":5,"instruccion":6,"imports":7,"PCOMA":8,"declaracion":9,"if":10,"switch":11,"while":12,"doWhile":13,"for":14,"IMPORT":15,"import":16,"COMA":17,"ARCHIVO":18,"type":19,"lista_id":20,"IGUAL":21,"expresion":22,"ids_anidados":23,"VAR":24,"IDENTIFICADOR":25,"DPIGUAL":26,"CONST":27,"GLOBAL":28,"tipo":29,"CORIZQ":30,"CORDER":31,"INTEGER":32,"DOUBLE":33,"CHAR":34,"BOOLEAN":35,"PUNTO":36,"IF":37,"PARIZQ":38,"PARDER":39,"bloqueInstrucciones":40,"ELSE":41,"LLAVIZQ":42,"LLAVDER":43,"SWITCH":44,"cases":45,"case":46,"CASE":47,"DOSPUNTOS":48,"DEFAULT":49,"WHILE":50,"DO":51,"FOR":52,"inicio":53,"condicion":54,"final":55,"OPINCREMENTO":56,"OPDECREMENTO":57,"MAS":58,"MENOS":59,"POR":60,"DIVIDIDO":61,"MODULO":62,"POWER":63,"XOR":64,"OR":65,"AND":66,"MENORIGUAL":67,"MAYORIGUAL":68,"MENOR":69,"MAYOR":70,"IGUALA":71,"TRIPLEIGUAL":72,"DIFERENTEDE":73,"NOT":74,"ENTERO":75,"DECIMAL":76,"TRUE":77,"FALSE":78,"CADENA":79,"CARACTER":80,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PCOMA",15:"IMPORT",17:"COMA",18:"ARCHIVO",21:"IGUAL",24:"VAR",25:"IDENTIFICADOR",26:"DPIGUAL",27:"CONST",28:"GLOBAL",30:"CORIZQ",31:"CORDER",32:"INTEGER",33:"DOUBLE",34:"CHAR",35:"BOOLEAN",36:"PUNTO",37:"IF",38:"PARIZQ",39:"PARDER",41:"ELSE",42:"LLAVIZQ",43:"LLAVDER",44:"SWITCH",47:"CASE",48:"DOSPUNTOS",49:"DEFAULT",50:"WHILE",51:"DO",52:"FOR",56:"OPINCREMENTO",57:"OPDECREMENTO",58:"MAS",59:"MENOS",60:"POR",61:"DIVIDIDO",62:"MODULO",63:"POWER",64:"XOR",65:"OR",66:"AND",67:"MENORIGUAL",68:"MAYORIGUAL",69:"MENOR",70:"MAYOR",71:"IGUALA",72:"TRIPLEIGUAL",73:"DIFERENTEDE",74:"NOT",75:"ENTERO",76:"DECIMAL",77:"TRUE",78:"FALSE",79:"CADENA",80:"CARACTER"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[7,2],[16,3],[16,1],[9,4],[9,3],[9,4],[9,4],[9,4],[9,2],[19,3],[19,1],[29,1],[29,1],[29,1],[29,1],[29,1],[23,3],[23,1],[20,3],[20,1],[10,5],[10,7],[10,7],[40,3],[11,7],[45,2],[45,1],[46,4],[46,3],[12,5],[13,6],[14,9],[53,1],[53,0],[54,1],[54,0],[55,1],[55,1],[55,0],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2: case 37:

		this.$ = $$[$0-1];
		this.$.push($$[$0]);
	
break;
case 3: case 31: case 38:

		this.$ = [$$[$0]];
	
break;
case 4:
 
		this.$ = $$[$0-1];
		console.log("INSTRUCCION IMPORTS " + $$[$0-1]);
	
break;
case 5:

		this.$ = $$[$0-1];
		//console.log("declaracion");
	
break;
case 6: case 7: case 8: case 9: case 10: case 23: case 24: case 25: case 26: case 27: case 76: case 77:

		this.$ = $$[$0];
	
break;
case 11:

			console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			//this.$ = "ERROR"
		
break;
case 12:

			this.$ = $$[$0];
			//todo crear nodo (import)
		
break;
case 13:

			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 14:

			this.$ = [$$[$0]];
		
break;
case 15:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " = " + $$[$0];
		console.log("declaracion 1 --" + $$[$0-3] + " " + $$[$0-2] + " = " + $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 16:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
		console.log("ASIGNACION -- " + $$[$0-2] + $$[$0-1] + $$[$0]);
		// todo - crear nodo ASIGNACION
	
break;
case 17:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0];
		console.log("declaracion 2 --" + $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 18:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0];
		console.log("declaracion 3 --" + $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 19:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0];
		console.log("declaracion 4 --" + $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 20:

		this.$ = $$[$0-1] + " " +  $$[$0];
		console.log("declaracion 5 --" + $$[$0-1] + " " +  $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 21:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
		// todo - crear nodo tipo diferenciando array de variable
	
break;
case 22:

		this.$ = $$[$0];
		// todo - crear nodo tipo diferenciando array de variable
	
break;
case 28:

		console.log("IDS_ANIDADOS -- " +$$[$0-2] + $$[$0-1] + $$[$0]);
		this.$ =$$[$0-2];
		this.$.push($$[$0]);
	
break;
case 29:

		console.log("IDENTIFICADOR IDS_ANIDADOS -- " +$$[$0]);
		this.$ = [$$[$0]];
	
break;
case 30:

		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 32:
 
			console.log("IF -- " + $$[$0-4] + " " + $$[$0-2]);
			// todo -- crear nodo de if
		
break;
case 33:
 
			console.log("IF ELSE IF -- " + $$[$0-6] + " " + $$[$0-4] + " ELSE IF ");
			// todo -- crear nodo de if
		
break;
case 34:
 
			console.log("IF ELSE -- " + $$[$0-6] + " " + $$[$0-4] + " ELSE ");
			// todo -- crear nodo de if
		
break;
case 35:

		// todo -- crear lista de instrucciones
		this.$ = $$[$0-1];
		console.log("BLOQUE INSTRUCCIONES -- " + $$[$0-1]);
	
break;
case 36:

		console.log($$[$0-6] + " " + $$[$0-4] + " " + $$[$0-1]);
		// todo - crear nodo switch
	
break;
case 39:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
		// todo - crear nodo case
	
break;
case 40:

		this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
		// todo - crear nodo case default
	
break;
case 41:

		console.log($$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]);
		// todo - crear nodo while
	
break;
case 42:

		console.log($$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-1]);
		// todo - crear nodo dowhile
	
break;
case 43:

		console.log($$[$0-8] + " " + $$[$0-6] + ";" + $$[$0-4] + "; " + $$[$0-2] + " " + $$[$0]);
		// todo - crear nodo for
	
break;
case 45: case 47: case 50:
 console.log(yytoken);
break;
case 51:
 this.$ = $$[$0-1] + 1; 
break;
case 52:
 this.$ = $$[$0-1] - 1; 
break;
case 53:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 54:
 this.$ = $$[$0-2] - $$[$0]; 
break;
case 55:
 this.$ = $$[$0-2] * $$[$0]; 
break;
case 56:
 this.$ = $$[$0-2] / $$[$0]; 
break;
case 57:
 this.$ = $$[$0-2] % $$[$0]; 
break;
case 58:
 this.$ = $$[$0-2] * $$[$0-2]; /* todo - logica para power */
break;
case 59:
 this.$ = $$[$0-2] ^ $$[$0]; 
break;
case 60:
 this.$ = $$[$0-2] ||¬†$$[$0]; 
break;
case 61:
 this.$ = $$[$0-2] && $$[$0]; 
break;
case 62:
 this.$ = $$[$0-2] <= $$[$0]; 
break;
case 63:
 this.$ = $$[$0-2] >= $$[$0]; 
break;
case 64:
 this.$ = $$[$0-2] < $$[$0]; 
break;
case 65:
 this.$ = $$[$0-2] > $$[$0]; 
break;
case 66:
 this.$ = $$[$0-2] == $$[$0]; 
break;
case 67:
 this.$ = $$[$0-2] === $$[$0]; 
break;
case 68:
 this.$ = $$[$0-2] != $$[$0]; 
break;
case 69:
 this.$ = $$[$0] *-1; 
break;
case 70:
 this.$ = !$$[$0]; 
break;
case 71: case 72:
 this.$ = Number($$[$0]); 
break;
case 73: case 74:
 this.$ = Boolean($$[$0]); 
break;
case 75:
 this.$ = $$[$0]; 
break;
case 78:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V1,19:13,23:14,24:$V2,25:$V3,27:$V4,28:$V5,29:23,32:$V6,33:$V7,34:$V8,35:$V9,37:$Va,44:$Vb,50:$Vc,51:$Vd,52:$Ve},{1:[3]},{2:$V0,5:[1,29],6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V1,19:13,23:14,24:$V2,25:$V3,27:$V4,28:$V5,29:23,32:$V6,33:$V7,34:$V8,35:$V9,37:$Va,44:$Vb,50:$Vc,51:$Vd,52:$Ve},o($Vf,[2,3]),{8:[1,31]},{8:[1,32]},o($Vf,[2,6]),o($Vf,[2,7]),o($Vf,[2,8]),o($Vf,[2,9]),o($Vf,[2,10]),{8:[1,33]},{16:34,18:[1,35]},{20:36,25:[1,37]},o($Vg,[2,27],{21:[1,38],36:[1,39]}),{25:[1,40]},{25:[1,41]},{25:[1,42]},{38:[1,43]},{38:[1,44]},{38:[1,45]},{40:46,42:$Vh},{38:[1,48]},{25:[2,22],30:[1,49]},o($Vi,[2,29]),o($Vg,[2,23]),o($Vg,[2,24]),o($Vg,[2,25]),o($Vg,[2,26]),{1:[2,1]},o($Vf,[2,2]),o($Vf,[2,4]),o($Vf,[2,5]),o($Vf,[2,11]),{8:[2,12],17:[1,50]},o($Vj,[2,14]),o($Vk,[2,20],{17:[1,52],21:[1,51]}),o($Vl,[2,31]),{22:53,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{25:[1,64]},{26:[1,65]},{26:[1,66]},{26:[1,67]},{22:68,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:69,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:70,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{50:[1,71]},{2:$V0,4:72,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V1,19:13,23:14,24:$V2,25:$V3,27:$V4,28:$V5,29:23,32:$V6,33:$V7,34:$V8,35:$V9,37:$Va,44:$Vb,50:$Vc,51:$Vd,52:$Ve},{8:[2,45],9:74,19:13,23:14,24:$V2,25:$V3,27:$V4,28:$V5,29:23,32:$V6,33:$V7,34:$V8,35:$V9,53:73},{31:[1,75]},{18:[1,76]},{22:77,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{25:[1,78]},o($Vk,[2,16],{56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),{22:97,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:98,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($VO,[2,71]),o($VO,[2,72]),o($VO,[2,73]),o($VO,[2,74]),o($VO,$VP),o($VO,[2,76]),o($VO,[2,77]),{22:99,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($Vi,[2,28]),{22:100,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:101,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:102,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{39:[1,103],56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{39:[1,104],56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{39:[1,105],56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{38:[1,106]},{2:$V0,6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V1,19:13,23:14,24:$V2,25:$V3,27:$V4,28:$V5,29:23,32:$V6,33:$V7,34:$V8,35:$V9,37:$Va,43:[1,107],44:$Vb,50:$Vc,51:$Vd,52:$Ve},{8:[1,108]},{8:[2,44]},{25:[2,21]},o($Vj,[2,13]),o($Vk,[2,15],{56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),o($Vl,[2,30]),o($VO,[2,51]),o($VO,[2,52]),{22:109,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:110,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:111,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:112,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:113,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:114,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:115,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:116,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:117,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:118,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:119,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:120,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:121,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:122,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:123,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{22:124,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($VO,[2,69]),o($VO,[2,70]),{39:[1,125],56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},o($Vk,[2,17],{56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),o($Vk,[2,18],{56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),o($Vk,[2,19],{56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),{40:126,42:$Vh},{42:[1,127]},{40:128,42:$Vh},{22:129,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o([2,5,15,24,25,27,28,32,33,34,35,37,41,43,44,47,49,50,51,52],[2,35]),{8:[2,47],22:131,25:$Vm,38:$Vn,54:130,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($VQ,[2,53],{60:$VA,61:$VB,62:$VC,63:$VD}),o($VQ,[2,54],{60:$VA,61:$VB,62:$VC,63:$VD}),o($VR,[2,55],{63:$VD}),o($VR,[2,56],{63:$VD}),o($VR,[2,57],{63:$VD}),o($VR,[2,58],{63:$VD}),o([8,39,48,56,57,64,65,66],[2,59],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),o([8,39,48,56,57,65,66],[2,60],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),o([8,39,48,56,57,66],[2,61],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN}),o($VS,[2,62],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD}),o($VS,[2,63],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD}),o($VS,[2,64],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD}),o($VS,[2,65],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD}),o($VS,[2,66],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,67:$VH,68:$VI,69:$VJ,70:$VK}),o($VS,[2,67],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,67:$VH,68:$VI,69:$VJ,70:$VK}),o($VS,[2,68],{58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,67:$VH,68:$VI,69:$VJ,70:$VK}),o($VO,[2,78]),o($Vf,[2,32],{41:[1,132]}),{45:133,46:134,47:$VT,49:$VU},o($Vf,[2,41]),{39:[1,137],56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{8:[1,138]},{8:[2,46],56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{10:139,37:$Va,40:140,42:$Vh},{43:[1,141],46:142,47:$VT,49:$VU},o($VV,[2,38]),{22:143,25:$Vm,38:$Vn,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},{48:[1,144]},o($Vf,[2,42]),{9:146,19:13,22:147,23:14,24:$V2,25:[1,148],27:$V4,28:$V5,29:23,32:$V6,33:$V7,34:$V8,35:$V9,38:$Vn,39:[2,50],55:145,59:$Vo,74:$Vp,75:$Vq,76:$Vr,77:$Vs,78:$Vt,79:$Vu,80:$Vv},o($Vf,[2,33]),o($Vf,[2,34]),o($Vf,[2,36]),o($VV,[2,37]),{48:[1,149],56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},{2:$V0,4:150,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V1,19:13,23:14,24:$V2,25:$V3,27:$V4,28:$V5,29:23,32:$V6,33:$V7,34:$V8,35:$V9,37:$Va,44:$Vb,50:$Vc,51:$Vd,52:$Ve},{39:[1,151]},{39:[2,48]},{39:[2,49],56:$Vw,57:$Vx,58:$Vy,59:$Vz,60:$VA,61:$VB,62:$VC,63:$VD,64:$VE,65:$VF,66:$VG,67:$VH,68:$VI,69:$VJ,70:$VK,71:$VL,72:$VM,73:$VN},o([21,25,30,36,39,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73],$VP),{2:$V0,4:152,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:$V1,19:13,23:14,24:$V2,25:$V3,27:$V4,28:$V5,29:23,32:$V6,33:$V7,34:$V8,35:$V9,37:$Va,44:$Vb,50:$Vc,51:$Vd,52:$Ve},o($VV,[2,40],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,19:13,23:14,29:23,6:30,2:$V0,15:$V1,24:$V2,25:$V3,27:$V4,28:$V5,32:$V6,33:$V7,34:$V8,35:$V9,37:$Va,44:$Vb,50:$Vc,51:$Vd,52:$Ve}),{40:153,42:$Vh},o($VV,[2,39],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,19:13,23:14,29:23,6:30,2:$V0,15:$V1,24:$V2,25:$V3,27:$V4,28:$V5,32:$V6,33:$V7,34:$V8,35:$V9,37:$Va,44:$Vb,50:$Vc,51:$Vd,52:$Ve}),o($Vf,[2,43])],
defaultActions: {29:[2,1],74:[2,44],75:[2,21],146:[2,48]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
                                            console.log("comment one line");
                                            //console.log(yy_.yytext);
                                        
break;
case 3:
                                            console.log("comment ML");
                                            //console.log(yy_.yytext);
                                        
break;
case 4:return 'NULL';
break;
case 5:return 32;
break;
case 6:return 33;
break;
case 7:return 34;
break;
case 8:return 35;
break;
case 9:return 15;
break;
case 10:return 24;
break;
case 11:return 27;
break;
case 12:return 28;
break;
case 13:return 77;
break;
case 14:return 78;
break;
case 15:return 37;
break;
case 16:return 41;
break;
case 17:return 44;
break;
case 18:return 47;
break;
case 19:return 49;
break;
case 20:return 'BREAK';
break;
case 21:return 'CONTINUE';
break;
case 22:return 'RETURN';
break;
case 23:return 'PRINT';
break;
case 24:return 'PUBLIC';
break;
case 25:return 'PRIVATE';
break;
case 26:return 'VOID';
break;
case 27:return 52;
break;
case 28:return 50;
break;
case 29:return 'DEFINE';
break;
case 30:return 'AS';
break;
case 31:return 'STRC';
break;
case 32:return 51;
break;
case 33:return 'TRY';
break;
case 34:return 'CATCH';
break;
case 35:return 'THROW';
break;
case 36:return 17;
break;
case 37:return 36;
break;
case 38:return 8;
break;
case 39:return 38;
break;
case 40:return 39;
break;
case 41:return 30;
break;
case 42:return 31;
break;
case 43:return 42;
break;
case 44:return 43;
break;
case 45:return 26;
break;
case 46:return 48;
break;
case 47:return 56;
break;
case 48:return 58;
break;
case 49:return 57;
break;
case 50:return 59;
break;
case 51:return 60;
break;
case 52:return 61;
break;
case 53:return 62;
break;
case 54:return 63;
break;
case 55:return 64;
break;
case 56:return 65;
break;
case 57:return 66;
break;
case 58:return 72;
break;
case 59:return 71;
break;
case 60:return 73;
break;
case 61:return 67;
break;
case 62:return 68;
break;
case 63:return 21;
break;
case 64:return 70;
break;
case 65:return 69;
break;
case 66:return 74;
break;
case 67: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 79; 
							
break;
case 68: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 80; 
							
break;
case 69:return 76;
break;
case 70:return 75;
break;
case 71:return 18;
break;
case 72:return 25;
break;
case 73:return 5;
break;
case 74: 
								console.error('Error L√©xico: ' + yy_.yytext + 
								', en la linea: ' + yy_.yylloc.first_line + ', y la columna: ' + yy_.yylloc.first_column); 
							
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::=)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:\^)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z√±√ë^\']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z0-9\.\-√±√ë])+[j])/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_√±√ë]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsharp;
exports.Parser = jsharp.Parser;
exports.parse = function () { return jsharp.parse.apply(jsharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}