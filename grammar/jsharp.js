/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,25],$V3=[1,44],$V4=[1,45],$V5=[1,46],$V6=[1,47],$V7=[1,48],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,26],$Vc=[1,57],$Vd=[1,27],$Ve=[1,71],$Vf=[1,28],$Vg=[1,29],$Vh=[1,30],$Vi=[1,31],$Vj=[1,32],$Vk=[1,33],$Vl=[1,34],$Vm=[1,35],$Vn=[1,36],$Vo=[1,37],$Vp=[1,69],$Vq=[1,60],$Vr=[1,59],$Vs=[1,62],$Vt=[1,63],$Vu=[1,64],$Vv=[1,65],$Vw=[1,66],$Vx=[1,67],$Vy=[1,68],$Vz=[1,70],$VA=[2,5,25,33,38,39,40,41,42,43,44,45,46,49,53,55,56,57,60,62,63,64,65,70,71,72,73,74,76,77,96,103,110,111,112,113,114,115,116,117],$VB=[2,119],$VC=[1,91],$VD=[1,97],$VE=[1,100],$VF=[1,104],$VG=[9,27,31,36,50,56,61],$VH=[1,106],$VI=[33,35,50],$VJ=[9,27,31,36,50,56,61,80],$VK=[1,107],$VL=[9,27,31,36,50,56,61,80,82],$VM=[1,108],$VN=[9,27,31,36,50,56,61,80,82,84],$VO=[1,109],$VP=[1,110],$VQ=[1,111],$VR=[9,27,31,36,50,56,61,80,82,84,86,87,88],$VS=[1,112],$VT=[1,113],$VU=[1,114],$VV=[1,115],$VW=[9,27,31,36,50,56,61,80,82,84,86,87,88,90,91,92,93],$VX=[1,116],$VY=[1,117],$VZ=[9,27,31,36,50,56,61,80,82,84,86,87,88,90,91,92,93,95,96],$V_=[1,118],$V$=[1,119],$V01=[1,120],$V11=[9,27,31,36,50,56,61,80,82,84,86,87,88,90,91,92,93,95,96,98,99,100],$V21=[1,121],$V31=[9,27,31,36,50,56,61,80,82,84,86,87,88,90,91,92,93,95,96,98,99,100,104],$V41=[1,129],$V51=[9,27,31,35,36,50,56,61,80,82,84,86,87,88,90,91,92,93,95,96,98,99,100,104,106,107,108],$V61=[2,5,25,27,33,38,39,40,41,42,43,44,45,46,49,53,55,56,57,60,62,63,64,65,70,71,72,73,74,76,77,96,103,110,111,112,113,114,115,116,117],$V71=[1,138],$V81=[9,27,31],$V91=[2,38],$Va1=[27,31],$Vb1=[1,187],$Vc1=[27,50,56],$Vd1=[1,195],$Ve1=[9,33,49,55,77,96,103,110,111,112,113,114,115,116,117],$Vf1=[1,214],$Vg1=[1,226],$Vh1=[27,36,50],$Vi1=[33,49,50,55,77,96,103,110,111,112,113,114,115,116,117],$Vj1=[1,263],$Vk1=[1,264],$Vl1=[56,60,62];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"instrucciones":4,"EOF":5,"instruccion":6,"imports":7,"declaraciones":8,"PCOMA":9,"asignacionArreglo":10,"definicionEstructura":11,"definicionFuncion":12,"if":13,"switch":14,"while":15,"doWhile":16,"for":17,"break":18,"continue":19,"return":20,"print":21,"trycatch":22,"throw":23,"expresion":24,"IMPORT":25,"import":26,"COMA":27,"ARCHIVO":28,"definicionTipo":29,"listaIds":30,"IGUAL":31,"calificadorTipo":32,"IDENTIFICADOR":33,"DPIGUAL":34,"CORIZQ":35,"CORDER":36,"tipo":37,"INTEGER":38,"DOUBLE":39,"CHAR":40,"BOOLEAN":41,"VOID":42,"VAR":43,"CONST":44,"GLOBAL":45,"DEFINE":46,"AS":47,"listaParametros":48,"PARIZQ":49,"PARDER":50,"bloqueInstrucciones":51,"parametro":52,"IF":53,"ELSE":54,"LLAVIZQ":55,"LLAVDER":56,"SWITCH":57,"cases":58,"case":59,"CASE":60,"DOSPUNTOS":61,"DEFAULT":62,"WHILE":63,"DO":64,"FOR":65,"inicio":66,"condicion":67,"final":68,"expresionOrExclusivo":69,"BREAK":70,"CONTINUE":71,"RETURN":72,"PRINT":73,"TRY":74,"CATCH":75,"THROW":76,"STRC":77,"expresionAsignacion":78,"expresionOr":79,"XOR":80,"expresionAnd":81,"OR":82,"expresionIgualdad":83,"AND":84,"expresionRelacional":85,"TRIPLEIGUAL":86,"IGUALA":87,"DIFERENTEDE":88,"expresionAditiva":89,"MAYOR":90,"MAYORIGUAL":91,"MENOR":92,"MENORIGUAL":93,"expresionMultiplicativa":94,"MAS":95,"MENOS":96,"expresionCasteo":97,"POR":98,"DIVIDIDO":99,"MODULO":100,"expresionUnaria":101,"expresionPostfix":102,"NOT":103,"POWER":104,"expresionPrimaria":105,"PUNTO":106,"OPINCREMENTO":107,"OPDECREMENTO":108,"expresionListaArgumentos":109,"CADENA":110,"CARACTER":111,"ENTERO":112,"DECIMAL":113,"TRUE":114,"FALSE":115,"DOLAR":116,"NULL":117,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PCOMA",25:"IMPORT",27:"COMA",28:"ARCHIVO",31:"IGUAL",33:"IDENTIFICADOR",34:"DPIGUAL",35:"CORIZQ",36:"CORDER",38:"INTEGER",39:"DOUBLE",40:"CHAR",41:"BOOLEAN",42:"VOID",43:"VAR",44:"CONST",45:"GLOBAL",46:"DEFINE",47:"AS",49:"PARIZQ",50:"PARDER",53:"IF",54:"ELSE",55:"LLAVIZQ",56:"LLAVDER",57:"SWITCH",60:"CASE",61:"DOSPUNTOS",62:"DEFAULT",63:"WHILE",64:"DO",65:"FOR",70:"BREAK",71:"CONTINUE",72:"RETURN",73:"PRINT",74:"TRY",75:"CATCH",76:"THROW",77:"STRC",80:"XOR",82:"OR",84:"AND",86:"TRIPLEIGUAL",87:"IGUALA",88:"DIFERENTEDE",90:"MAYOR",91:"MAYORIGUAL",92:"MENOR",93:"MENORIGUAL",95:"MAS",96:"MENOS",98:"POR",99:"DIVIDIDO",100:"MODULO",103:"NOT",104:"POWER",106:"PUNTO",107:"OPINCREMENTO",108:"OPDECREMENTO",110:"CADENA",111:"CARACTER",112:"ENTERO",113:"DECIMAL",114:"TRUE",115:"FALSE",116:"DOLAR",117:"NULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,1],[7,2],[26,3],[26,1],[8,4],[8,2],[8,4],[8,4],[8,6],[29,3],[29,1],[37,1],[37,1],[37,1],[37,1],[37,1],[30,3],[30,1],[32,1],[32,1],[32,1],[10,6],[11,6],[12,6],[12,5],[12,6],[12,5],[12,8],[12,7],[48,3],[48,1],[52,2],[52,4],[52,2],[52,4],[52,4],[13,5],[13,7],[13,7],[51,3],[14,7],[58,2],[58,1],[59,4],[59,3],[15,5],[16,6],[17,7],[66,2],[66,1],[67,2],[67,1],[68,1],[68,0],[18,1],[19,1],[20,2],[21,4],[22,8],[23,5],[24,1],[78,1],[78,3],[69,1],[69,3],[79,1],[79,3],[81,1],[81,3],[83,1],[83,3],[83,3],[83,3],[85,1],[85,3],[85,3],[85,3],[85,3],[89,1],[89,3],[89,3],[94,1],[94,3],[94,3],[94,3],[97,1],[97,4],[101,1],[101,2],[101,2],[101,3],[102,1],[102,4],[102,3],[102,2],[102,2],[109,1],[109,3],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,2],[105,4],[105,5],[105,5],[105,3],[105,4],[105,1],[105,3],[105,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

		arbol = new Arbol($$[$0-1]);
		arbol.errores = errores;
		return arbol;
	
break;
case 2: case 62:

		this.$ = $$[$0-1];
		this.$.push($$[$0]);
	
break;
case 3: case 38: case 51: case 63: case 117:

		this.$ = [$$[$0]];
	
break;
case 4:

		this.$ = new Import($$[$0], this._$.first_line, this._$.first_column);
		/* this.$ = $$[$0]; */
		//console.log("IMPORTS |||| " +JSON.stringify(this.$, null, 2));
	
break;
case 5:

		this.$ = $$[$0-1];
		//console.log("DECLARACION |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 6:

		this.$ = $$[$0-1];
		//console.log("ASIGNACION ARREGLO |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 7:

		this.$ = $$[$0-1];
		//console.log("DEFINICION ESTRUCTURA |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 8:

		this.$ = $$[$0];
		//console.log("FUNCION |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 9:

		this.$ = $$[$0];
		//console.log("IF |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 10:

		this.$ = $$[$0];
		//console.log("SWITCH |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 11:

		this.$ = $$[$0];
		//console.log("WHILE |||| " +JSON.stringify(this.$, null, 2));
	
break;
case 12:

		this.$ = $$[$0];
		//console.log("DOWHILE |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 13:

		this.$ = $$[$0];
		//console.log("FOR |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 14: case 15: case 16: case 60:

		this.$ = $$[$0-1];
	
break;
case 17:

		this.$ = $$[$0-1];
		//console.log("PRINT |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 18:

		this.$ = $$[$0];
		//console.log("TRY-CATCH |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 19:

		this.$ = $$[$0-1];
		//console.log("THROW |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 20:

		this.$ = $$[$0-1];
		//console.log("EXPRESION |||| " + JSON.stringify(this.$, null, 2));
	
break;
case 21:

			let error =  new Excepcion("Sintáctico", 'Caracter no esperado: [' + yytext + ']', this._$.first_line, this._$.first_column);
			errores.push(error);
			//console.error('Error sintáctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: '
			//+ this._$.first_column);
			//". Se esperaba [" + JSON.stringify($$[$0]) + "]."); 
			//this.$ = "ERROR"
	
break;
case 22:

			this.$ = $$[$0];
		
break;
case 23:

			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 24:

			this.$ = [$$[$0]];
		
break;
case 25:
  // declaracion tipo 1
		this.$ = new Declaracion($$[$0-3], null, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 26:
  // declaracion tipo 5
		this.$ = new Declaracion($$[$0-1], null, $$[$0], null, this._$.first_line, this._$.first_column);
	
break;
case 27:
  // declaracion tipo 2, 3 y 4 - incluye estructuras en expresion (strc)
		this.$ = new Declaracion(new Tipo("", false, null), $$[$0-3], [$$[$0-2]], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 28:
  // declaracion estructuras
		this.$ = new Declaracion(new Tipo("", false, $$[$0-3]), null, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 29:
  // declaracion arreglos de estructuras
		this.$ = new Declaracion(new Tipo("", true, $$[$0-5]), null, $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 30:

		this.$ = new Tipo($$[$0-2], true, null)
	
break;
case 31:

		this.$ = new Tipo($$[$0], false, null)
	
break;
case 32:

		this.$ = Types.INTEGER;
	
break;
case 33:

		this.$ = Types.DOUBLE;
	
break;
case 34:

		this.$ = Types.CHAR;
	
break;
case 35:

		this.$ = Types.BOOLEAN;
	
break;
case 36:

		this.$ = Types.VOID;
	
break;
case 37: case 50: case 118:

		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 39:

		this.$ = CalificadorTipo.VAR;
	
break;
case 40:

		this.$ = CalificadorTipo.CONST;
	
break;
case 41:

		this.$ = CalificadorTipo.GLOBAL;
	
break;
case 42:

		this.$ = new AsignacionArreglo(new Identificador($$[$0-5], _$[$0-5].first_line, _$[$0-5].first_column), $$[$0-3], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 43:

		this.$ = new DefinicionEstructura($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column);
	
break;
case 44:

		this.$ = new Funcion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 45:

		this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 46:

		this.$ = new Funcion(new Tipo("", false, $$[$0-5]), $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 47:

		this.$ = new Funcion(new Tipo("", false, $$[$0-4]), $$[$0-3], [], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 48:

		this.$ = new Funcion(new Tipo("", true, $$[$0-7]), $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 49:

		this.$ = new Funcion(new Tipo("", true, $$[$0-6]), $$[$0-3], [], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 52:

		this.$ = new Parametro($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column);
	
break;
case 53:

		this.$ = new Parametro($$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 54:

		this.$ = new Parametro(new Tipo("", false, $$[$0-1]), $$[$0], null, this._$.first_line, this._$.first_column);
	
break;
case 55:

		this.$ = new Parametro(new Tipo("", false, $$[$0-3]), $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 56:

		this.$ = new Parametro(new Tipo("", true, $$[$0-3]), $$[$0], null, this._$.first_line, this._$.first_column);
	
break;
case 57:
 
		this.$ = new If($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
		
break;
case 58:
 
		this.$ = new IfElseIf($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
		
break;
case 59:
 
		this.$ = new IfElse($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
		
break;
case 61:

		this.$ = new Switch($$[$0-4], $$[$0-1], this._$.first_line, this._$.first_column);
	
break;
case 64:

		this.$ = new Caso($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 65:

		this.$ = new CasoDefault($$[$0], this._$.first_line, this._$.first_column);
	
break;
case 66:

		this.$ = new While($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 67:

		this.$ = new DoWhile($$[$0-1], $$[$0-4], this._$.first_line, this._$.first_column);
	
break;
case 68:

		this.$ = new For($$[$0-4], $$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 69: case 71:
 
		this.$ = $$[$0-1];
	
break;
case 70: case 72: case 74:
 this.$ = null; 
break;
case 73:
 
		this.$ = $$[$0];
	
break;
case 75:

		this.$ = new Break(this._$.first_line, this._$.first_column);
	
break;
case 76:

		this.$ = new Continue(this._$.first_line, this._$.first_column);
	
break;
case 77:

		this.$ = new Return($$[$0], this._$.first_line, this._$.first_column);
	
break;
case 78:

		this.$ = new Print($$[$0-1], this._$.first_line, this._$.first_column);
	
break;
case 79:

		this.$ = new TryCatch($$[$0-6], $$[$0-3], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 80:

		this.$ = new Throw($$[$0-2], this._$.first_line, this._$.first_column);
	
break;
case 81: case 82: case 84: case 86: case 88: case 90: case 94: case 99: case 102: case 106: case 108: case 112:

		this.$ = $$[$0];
	
break;
case 83:

		this.$ = new ExpresionAsignacion($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 85: case 87: case 89:

		this.$ = new ExpresionLogica($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 91: case 92: case 93:

		this.$ = new ExpresionIgualdad($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 95: case 96: case 97: case 98:

		this.$ = new ExpresionRelacional($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 100: case 101:

		this.$ = new ExpresionAditiva($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 103: case 104: case 105:

		this.$ = new ExpresionMultiplicativa($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 107:

		this.$ = new ExpresionCasteo($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 109: case 110:

		this.$ = new ExpresionUnaria($$[$0], $$[$0-1], this._$.first_line, this._$.first_column);
	
break;
case 111:

		this.$ = new ExpresionPotencia($$[$0-2], $$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 113:

		this.$ = new AccesoArreglo($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
	
break;
case 114:

		this.$ = new AccesoPropiedadEstructura($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 115:

		this.$ = new ExpresionPostIncremento($$[$0-1], this._$.first_line, this._$.first_column);
	
break;
case 116:

		this.$ = new ExpresionPostDecremento($$[$0-1], this._$.first_line, this._$.first_column);
	
break;
case 119:

		this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column);
	
break;
case 120:

		this.$ = new Cadena(new Tipo(Types.STRING, false, null), $$[$0], new Arreglo(new Tipo(Types.STRING, true, null), this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column);
	
break;
case 121:

		this.$ = new Valor(new Tipo(Types.CHAR, false, null), $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 122:

		this.$ = new Valor(new Tipo(Types.INTEGER, false, null), new Number($$[$0]), this._$.first_line, this._$.first_column);
	
break;
case 123:

		this.$ = new Valor(new Tipo(Types.DOUBLE, false, null), new Number($$[$0]), this._$.first_line, this._$.first_column);
	
break;
case 124:

		this.$ = new Valor(new Tipo(Types.BOOLEAN, false, null), 1, this._$.first_line, this._$.first_column);
	
break;
case 125:

		this.$ = new Valor(new Tipo(Types.BOOLEAN, false, null), 0, this._$.first_line, this._$.first_column);
	
break;
case 126:

		this.$ = new ParametroPorValor(new Tipo("", false, null), $$[$0], this._$.first_line, this._$.first_column);
	
break;
case 127:
 //strc Estudiante() (crea instancias de estructuras)
		this.$ = new InstanciaEstructura($$[$0-2], this._$.first_line, this._$.first_column);
	
break;
case 128:
 //strc Estudiante[2] (crea ARREGLOS de estructuras)
		this.$ = new Arreglo(new Tipo("", true, $$[$0-3]), $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
	
break;
case 129:
 //strc integer (inicializador de ARREGLOS de primitivos)
		this.$ = new Arreglo(new Tipo($$[$0-3], true, null), $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
	
break;
case 130:

    		this.$ = new LlamadaFuncion($$[$0-2], [], this._$.first_line, this._$.first_column);
    
break;
case 131:

            this.$ = new LlamadaFuncion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
    
break;
case 132:

		this.$ = new Valor(new Tipo(Types.NULL, false, null), 'null', this._$.first_line, this._$.first_column);
	
break;
case 133:

		this.$ = new ArregloExplicito($$[$0-1], _$[$0-1].first_line, _$[$0-1].first_column);
	
break;
case 134:

		this.$ = $$[$0-1]
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,76:$Vo,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{1:[3]},{2:$V0,5:[1,72],6:73,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,76:$Vo,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($VA,[2,3]),o($VA,[2,4]),{9:[1,74]},{9:[1,75]},{9:[1,76]},o($VA,[2,8]),o($VA,[2,9]),o($VA,[2,10]),o($VA,[2,11]),o($VA,[2,12]),o($VA,[2,13]),{9:[1,77]},{9:[1,78]},{9:[1,79]},{9:[1,80]},o($VA,[2,18]),{9:[1,81]},{9:[1,82]},o($VA,[2,21]),{26:83,28:[1,84]},{30:85,33:[1,86]},{33:[1,87]},o([9,31,80,82,84,86,87,88,90,91,92,93,95,96,98,99,100,104,106,107,108],$VB,{30:88,33:[1,90],35:[1,89],49:$VC}),{33:[1,92]},{49:[1,93]},{49:[1,94]},{49:[1,95]},{51:96,55:$VD},{49:[1,98]},{9:[2,75]},{9:[2,76]},{24:99,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{49:[1,101]},{51:102,55:$VD},{77:[1,103]},o([9,27,36,50,61],[2,81],{31:$VF}),{33:[2,31],35:[1,105]},{33:[2,39]},{33:[2,40]},{33:[2,41]},o($VG,[2,82],{80:$VH}),o($VI,[2,32]),o($VI,[2,33]),o($VI,[2,34]),o($VI,[2,35]),o($VI,[2,36]),o($VJ,[2,84],{82:$VK}),o($VL,[2,86],{84:$VM}),o($VN,[2,88],{86:$VO,87:$VP,88:$VQ}),o($VR,[2,90],{90:$VS,91:$VT,92:$VU,93:$VV}),o($VW,[2,94],{95:$VX,96:$VY}),o($VZ,[2,99],{98:$V_,99:$V$,100:$V01}),o($V11,[2,102]),o($V11,[2,106],{104:$V21}),{24:123,33:$VE,37:122,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($V31,[2,108],{35:[1,124],106:[1,125],107:[1,126],108:[1,127]}),{33:$VE,49:$V41,55:$Ve,77:$Vp,96:$Vq,101:128,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$V41,55:$Ve,77:$Vp,96:$Vq,101:130,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($V51,[2,112]),o($V51,[2,120]),o($V51,[2,121]),o($V51,[2,122]),o($V51,[2,123]),o($V51,[2,124]),o($V51,[2,125]),{33:[1,131]},{33:[1,132],37:133,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7},o($V51,[2,132]),{33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:135,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,109:134,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{1:[2,1]},o($VA,[2,2]),o($VA,[2,5]),o($VA,[2,6]),o($VA,[2,7]),o($VA,[2,14]),o($VA,[2,15]),o($VA,[2,16]),o($VA,[2,17]),o($VA,[2,19]),o($VA,[2,20]),o($VA,[2,22],{27:[1,136]}),o($V61,[2,24]),{9:[2,26],27:$V71,31:[1,137]},o($V81,$V91,{49:[1,139]}),{34:[1,140]},{27:$V71,31:[1,141]},{24:143,33:$VE,36:[1,142],49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($Va1,$V91,{49:[1,144]}),{33:$VE,49:$Vc,50:[1,145],55:$Ve,69:43,77:$Vp,78:135,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,109:146,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{47:[1,147]},{24:148,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{24:149,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{24:150,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{63:[1,151]},{2:$V0,4:152,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,76:$Vo,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{8:154,9:[1,155],29:156,32:24,33:[1,157],37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,66:153},{9:[2,77]},o($V51,$VB,{49:$VC}),{24:158,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{75:[1,159]},{33:[1,160]},{33:$VE,49:$Vc,55:$Ve,69:161,77:$Vp,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{36:[1,162]},{33:$VE,49:$Vc,55:$Ve,77:$Vp,79:163,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,81:164,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,83:165,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,85:166,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,85:167,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,85:168,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,89:169,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,89:170,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,89:171,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,89:172,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,94:173,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,94:174,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,96:$Vq,97:175,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,96:$Vq,97:176,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$Vc,55:$Ve,77:$Vp,96:$Vq,97:177,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$V41,55:$Ve,77:$Vp,96:$Vq,101:178,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{50:[1,179]},{50:[1,180]},{24:181,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:$VE,49:$V41,55:$Ve,77:$Vp,105:182,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($V51,[2,115]),o($V51,[2,116]),o($V31,[2,109]),{24:123,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($V31,[2,110]),o($V51,[2,126]),{35:[1,184],49:[1,183]},{35:[1,185]},{27:$Vb1,56:[1,186]},o($Vc1,[2,117],{31:$VF}),{28:[1,188]},{24:189,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:[1,190]},{29:194,33:$Vd1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,48:191,50:[1,192],52:193},{24:196,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{24:197,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{30:198,33:[1,199]},{36:[1,200]},{29:194,33:$Vd1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,48:201,50:[1,202],52:193},o($V51,[2,130]),{27:$Vb1,50:[1,203]},{35:[1,204]},{50:[1,205]},{50:[1,206]},{50:[1,207]},{49:[1,208]},{2:$V0,6:73,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,56:[1,209],57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,76:$Vo,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{9:[1,212],33:$VE,49:$Vc,55:$Ve,67:210,69:211,77:$Vp,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{9:[1,213]},o($Ve1,[2,70]),{30:85,33:$Vf1},{30:88,33:$Vf1,35:[1,215]},{50:[1,216]},{49:[1,217]},{49:[1,218]},o($VG,[2,83],{80:$VH}),{33:[2,30]},o($VJ,[2,85],{82:$VK}),o($VL,[2,87],{84:$VM}),o($VN,[2,89],{86:$VO,87:$VP,88:$VQ}),o($VR,[2,91],{90:$VS,91:$VT,92:$VU,93:$VV}),o($VR,[2,92],{90:$VS,91:$VT,92:$VU,93:$VV}),o($VR,[2,93],{90:$VS,91:$VT,92:$VU,93:$VV}),o($VW,[2,95],{95:$VX,96:$VY}),o($VW,[2,96],{95:$VX,96:$VY}),o($VW,[2,97],{95:$VX,96:$VY}),o($VW,[2,98],{95:$VX,96:$VY}),o($VZ,[2,100],{98:$V_,99:$V$,100:$V01}),o($VZ,[2,101],{98:$V_,99:$V$,100:$V01}),o($V11,[2,103]),o($V11,[2,104]),o($V11,[2,105]),o($V11,[2,111],{104:$V21}),{33:$VE,49:$Vc,55:$Ve,77:$Vp,96:$Vq,97:219,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($V51,[2,134]),{36:[1,220]},o($V51,[2,114]),{50:[1,221]},{24:222,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{24:223,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($V51,[2,133]),{33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:224,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($V61,[2,23]),{9:[2,25]},o($V81,[2,37]),{27:$Vg1,50:[1,225]},{51:227,55:$VD},o($Vh1,[2,51]),{33:[1,228]},{33:[1,229],35:[1,230]},{9:[2,27]},{9:[2,28]},{27:$V71,31:[1,231]},o($Va1,$V91,{49:[1,232]}),{31:[1,233]},{27:$Vg1,50:[1,234]},{51:235,55:$VD},o($V51,[2,131]),{29:194,33:$Vd1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,48:236,52:193},{51:237,55:$VD},{55:[1,238]},{51:239,55:$VD},{24:240,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o([2,5,25,33,38,39,40,41,42,43,44,45,46,49,53,54,55,56,57,60,62,63,64,65,70,71,72,73,74,75,76,77,96,103,110,111,112,113,114,115,116,117],[2,60]),{24:242,33:$VE,49:$Vc,50:[2,74],55:$Ve,68:241,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{9:[1,243],80:$VH},o($Vi1,[2,72]),o($Ve1,[2,69]),o($V81,$V91),{36:[1,244]},{9:[2,78]},{33:[1,245]},{50:[1,246]},o($V11,[2,107]),o($V51,[2,113]),o($V51,[2,127]),{36:[1,247]},{36:[1,248]},o($Vc1,[2,118],{31:$VF}),{51:249,55:$VD},{29:194,33:$Vd1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,52:250},o($VA,[2,45]),o($Vh1,[2,52],{31:[1,251]}),o($Vh1,[2,54],{31:[1,252]}),{36:[1,253]},{24:254,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{29:194,33:$Vd1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,48:255,50:[1,256],52:193},{24:257,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{51:258,55:$VD},o($VA,[2,47]),{27:$Vg1,36:[1,259]},o($VA,[2,57],{54:[1,260]}),{58:261,59:262,60:$Vj1,62:$Vk1},o($VA,[2,66]),{50:[1,265]},{50:[1,266]},{50:[2,73]},o($Vi1,[2,71]),{30:198,33:$Vf1},{33:[1,267]},{9:[2,80]},o($V51,[2,128]),o($V51,[2,129]),o($VA,[2,44]),o($Vh1,[2,50]),{24:268,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{24:269,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{33:[1,270]},{9:[2,29]},{27:$Vg1,50:[1,271]},{51:272,55:$VD},{9:[2,42]},o($VA,[2,46]),{9:[2,43]},{13:273,51:274,53:$Vd,55:$VD},{56:[1,275],59:276,60:$Vj1,62:$Vk1},o($Vl1,[2,63]),{24:277,33:$VE,49:$Vc,55:$Ve,69:43,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},{61:[1,278]},o($VA,[2,67]),{51:279,55:$VD},{50:[1,280]},o($Vh1,[2,53]),o($Vh1,[2,55]),o($Vh1,[2,56]),{51:281,55:$VD},o($VA,[2,49]),o($VA,[2,58]),o($VA,[2,59]),o($VA,[2,61]),o($Vl1,[2,62]),{61:[1,282]},{2:$V0,4:283,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,76:$Vo,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($VA,[2,68]),{51:284,55:$VD},o($VA,[2,48]),{2:$V0,4:285,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,76:$Vo,77:$Vp,78:38,79:49,81:50,83:51,85:52,89:53,94:54,96:$Vq,97:55,101:56,102:58,103:$Vr,105:61,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz},o($Vl1,[2,65],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,29:23,32:24,78:38,37:39,69:43,79:49,81:50,83:51,85:52,89:53,94:54,97:55,101:56,102:58,105:61,6:73,2:$V0,25:$V1,33:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,76:$Vo,77:$Vp,96:$Vq,103:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz}),o($VA,[2,79]),o($Vl1,[2,64],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,29:23,32:24,78:38,37:39,69:43,79:49,81:50,83:51,85:52,89:53,94:54,97:55,101:56,102:58,105:61,6:73,2:$V0,25:$V1,33:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,70:$Vj,71:$Vk,72:$Vl,73:$Vm,74:$Vn,76:$Vo,77:$Vp,96:$Vq,103:$Vr,110:$Vs,111:$Vt,112:$Vu,113:$Vv,114:$Vw,115:$Vx,116:$Vy,117:$Vz})],
defaultActions: {32:[2,75],33:[2,76],40:[2,39],41:[2,40],42:[2,41],72:[2,1],99:[2,77],162:[2,30],189:[2,25],196:[2,27],197:[2,28],216:[2,78],242:[2,73],246:[2,80],254:[2,29],257:[2,42],259:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

	const Arbol = require('../analizador/Arbol');
	const errores = [];
	const Excepcion = require('../analizador/Excepciones/Excepcion');

	const Import = require('../analizador/instrucciones/Import');
	const Declaracion  = require('../analizador/instrucciones/Declaracion');
	const AsignacionArreglo = require('../analizador/instrucciones/AsignacionArreglo');
	const DefinicionEstructura = require('../analizador/instrucciones/DefinicionEstructura');
	const Funcion = require('../analizador/instrucciones/Funcion');
	const If = require('../analizador/instrucciones/If');
	const IfElse = require('../analizador/instrucciones/IfElse');
	const IfElseIf = require('../analizador/instrucciones/IfElseIf');
	const Switch = require('../analizador/instrucciones/Switch');
	const While = require('../analizador/instrucciones/While');
	const DoWhile = require('../analizador/instrucciones/DoWhile');
	const For = require('../analizador/instrucciones/For');
	const TryCatch = require('../analizador/instrucciones/TryCatch');
	const Print = require('../analizador/instrucciones/Print');


	const Valor = require('../analizador/expresiones/Valor');
	const Cadena = require('../analizador/expresiones/Cadena');
	const Identificador = require('../analizador/expresiones/Identificador');
	const Parametro = require('../analizador/expresiones/Parametro');
	const Caso = require('../analizador/expresiones/Caso');
	const CasoDefault = require('../analizador/expresiones/CasoDefault');
	const AccesoArreglo = require('../analizador/expresiones/AccesoArreglo');
	const LlamadaFuncion = require('../analizador/expresiones/LlamadaFuncion');
	const AccesoPropiedadEstructura = require('../analizador/expresiones/AccesoPropiedadEstructura');
	const ExpresionPostIncremento = require('../analizador/expresiones/ExpresionPostIncremento');
	const ExpresionPostDecremento = require('../analizador/expresiones/ExpresionPostDecremento');
	const ExpresionAsignacion = require('../analizador/expresiones/ExpresionAsignacion');
	const ParametroPorValor = require('../analizador/expresiones/ParametroPorValor');
	const InstanciaEstructura = require('../analizador/expresiones/InstanciaEstructura');
	const Arreglo = require('../analizador/expresiones/Arreglo');
	const ArregloExplicito = require('../analizador/expresiones/ArregloExplicito');
	const Throw = require('../analizador/expresiones/Throw');
	const ExpresionUnaria = require('../analizador/expresiones/ExpresionUnaria');
	const ExpresionPotencia = require('../analizador/expresiones/ExpresionPotencia');
	const ExpresionCasteo = require('../analizador/expresiones/ExpresionCasteo');
	const Return = require('../analizador/expresiones/Return');
	const ExpresionRelacional = require('../analizador/expresiones/ExpresionRelacional');
	const ExpresionMultiplicativa = require('../analizador/expresiones/ExpresionMultiplicativa');
	const ExpresionLogica = require('../analizador/expresiones/ExpresionLogica');
	const ExpresionIgualdad = require('../analizador/expresiones/ExpresionIgualdad');
	const ExpresionAditiva = require('../analizador/expresiones/ExpresionAditiva');
	const Continue = require('../analizador/expresiones/Continue');
	const Break = require('../analizador/expresiones/Break');

	const Tipo  = require('../analizador/tabla/Tipo').Tipo;
	const Types  = require('../analizador/tabla/Tipo').Types;
	const CalificadorTipo  = require('../analizador/tabla/CalificadorTipo').calificadores;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
                                            //console.log("comment one line");
                                            //console.log(yy_.yytext);
                                        
break;
case 2:
                                            //console.log("comment ML");
                                            //console.log(yy_.yytext);
                                        
break;
case 3:return 117;
break;
case 4:return 38;
break;
case 5:return 39;
break;
case 6:return 40;
break;
case 7:return 41;
break;
case 8:return 25;
break;
case 9:return 43;
break;
case 10:return 44;
break;
case 11:return 45;
break;
case 12:return 114;
break;
case 13:return 115;
break;
case 14:return 53;
break;
case 15:return 54;
break;
case 16:return 57;
break;
case 17:return 60;
break;
case 18:return 62;
break;
case 19:return 70;
break;
case 20:return 71;
break;
case 21:return 72;
break;
case 22:return 73;
break;
case 23:return 'PUBLIC';
break;
case 24:return 'PRIVATE';
break;
case 25:return 42;
break;
case 26:return 65;
break;
case 27:return 63;
break;
case 28:return 46;
break;
case 29:return 47;
break;
case 30:return 77;
break;
case 31:return 64;
break;
case 32:return 74;
break;
case 33:return 75;
break;
case 34:return 76;
break;
case 35:return 27;
break;
case 36:return 106;
break;
case 37:return 9;
break;
case 38:return 49;
break;
case 39:return 50;
break;
case 40:return 35;
break;
case 41:return 36;
break;
case 42:return 55;
break;
case 43:return 56;
break;
case 44:return 34;
break;
case 45:return 61;
break;
case 46:return 107;
break;
case 47:return 95;
break;
case 48:return 108;
break;
case 49:return 96;
break;
case 50:return 98;
break;
case 51:return 99;
break;
case 52:return 100;
break;
case 53:return 104;
break;
case 54:return 80;
break;
case 55:return 82;
break;
case 56:return 84;
break;
case 57:return 86;
break;
case 58:return 87;
break;
case 59:return 88;
break;
case 60:return 93;
break;
case 61:return 91;
break;
case 62:return 31;
break;
case 63:return 90;
break;
case 64:return 92;
break;
case 65:return 103;
break;
case 66:return 116;
break;
case 67: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 110; 
							
break;
case 68: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 111; 
							
break;
case 69:return 113;
break;
case 70:return 112;
break;
case 71:return 28;
break;
case 72:return 33;
break;
case 73:return 5;
break;
case 74: 
								let error =  new Excepcion("Léxico", 'Caracter no aceptado: [' + yy_.yytext + ']', yy_.yylloc.first_line, yy_.yylloc.first_column);
								errores.push(error);
								//console.log(error.toString());
								//console.error('Error Léxico: ' + yy_.yytext +
								//', en la linea: ' + yy_.yylloc.first_line + ', y la columna: ' + yy_.yylloc.first_column);
							
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::=)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:\^)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!)/i,/^(?:\$)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-ZñÑ^\']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z0-9\.\-ñÑ])+[j])/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_ñÑ]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsharp;
exports.Parser = jsharp.Parser;
exports.parse = function () { return jsharp.parse.apply(jsharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}