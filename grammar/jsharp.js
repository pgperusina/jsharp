/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,21],$V1=[1,22],$V2=[1,25],$V3=[1,44],$V4=[1,45],$V5=[1,46],$V6=[1,47],$V7=[1,48],$V8=[1,40],$V9=[1,41],$Va=[1,42],$Vb=[1,26],$Vc=[1,57],$Vd=[1,27],$Ve=[1,71],$Vf=[1,28],$Vg=[1,29],$Vh=[1,30],$Vi=[1,31],$Vj=[1,32],$Vk=[1,33],$Vl=[1,34],$Vm=[1,68],$Vn=[1,35],$Vo=[1,36],$Vp=[1,37],$Vq=[1,69],$Vr=[1,60],$Vs=[1,59],$Vt=[1,62],$Vu=[1,63],$Vv=[1,64],$Vw=[1,65],$Vx=[1,66],$Vy=[1,67],$Vz=[1,70],$VA=[2,5,25,33,38,39,40,41,42,43,44,45,46,49,53,55,56,57,60,62,63,64,65,70,71,72,76,77,78,80,81,101,107,114,115,116,117,118,119,120],$VB=[2,127],$VC=[1,97],$VD=[1,100],$VE=[1,104],$VF=[9,27,31,36,50,56,61],$VG=[1,106],$VH=[9,27,31,33,35,36,49,50,56,61,85,87,89,91,92,93,95,96,97,98,100,101,103,104,105,108,111,112,113],$VI=[9,27,31,36,50,56,61,85],$VJ=[1,107],$VK=[9,27,31,36,50,56,61,85,87],$VL=[1,108],$VM=[9,27,31,36,50,56,61,85,87,89],$VN=[1,109],$VO=[1,110],$VP=[1,111],$VQ=[9,27,31,36,50,56,61,85,87,89,91,92,93],$VR=[1,112],$VS=[1,113],$VT=[1,114],$VU=[1,115],$VV=[9,27,31,36,50,56,61,85,87,89,91,92,93,95,96,97,98],$VW=[1,116],$VX=[1,117],$VY=[9,27,31,36,50,56,61,85,87,89,91,92,93,95,96,97,98,100,101],$VZ=[1,118],$V_=[1,119],$V$=[1,120],$V01=[9,27,31,36,50,56,61,85,87,89,91,92,93,95,96,97,98,100,101,103,104,105],$V11=[1,121],$V21=[9,27,31,36,50,56,61,85,87,89,91,92,93,95,96,97,98,100,101,103,104,105,108],$V31=[1,124],$V41=[1,125],$V51=[1,126],$V61=[1,127],$V71=[1,128],$V81=[1,130],$V91=[9,27,31,35,36,49,50,56,61,85,87,89,91,92,93,95,96,97,98,100,101,103,104,105,108,111,112,113],$Va1=[2,5,25,27,33,38,39,40,41,42,43,44,45,46,49,53,55,56,57,60,62,63,64,65,70,71,72,76,77,78,80,81,101,107,114,115,116,117,118,119,120],$Vb1=[1,139],$Vc1=[9,27,31],$Vd1=[2,38],$Ve1=[1,186],$Vf1=[27,50,56],$Vg1=[1,194],$Vh1=[9,33,49,55,76,81,101,107,114,115,116,117,118,119,120],$Vi1=[1,211],$Vj1=[1,220],$Vk1=[27,36,50],$Vl1=[1,225],$Vm1=[33,49,50,55,76,81,101,107,114,115,116,117,118,119,120],$Vn1=[1,252],$Vo1=[1,253],$Vp1=[56,60,62];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"instrucciones":4,"EOF":5,"instruccion":6,"imports":7,"declaraciones":8,"PCOMA":9,"asignaciones":10,"definicionEstructura":11,"definicionFuncion":12,"if":13,"switch":14,"while":15,"doWhile":16,"for":17,"break":18,"continue":19,"return":20,"print":21,"trycatch":22,"throw":23,"expresion":24,"IMPORT":25,"import":26,"COMA":27,"ARCHIVO":28,"definicionTipo":29,"listaIds":30,"IGUAL":31,"calificadorTipo":32,"IDENTIFICADOR":33,"DPIGUAL":34,"CORIZQ":35,"CORDER":36,"tipo":37,"INTEGER":38,"DOUBLE":39,"CHAR":40,"BOOLEAN":41,"VOID":42,"VAR":43,"CONST":44,"GLOBAL":45,"DEFINE":46,"AS":47,"listaParametros":48,"PARIZQ":49,"PARDER":50,"bloqueInstrucciones":51,"parametro":52,"IF":53,"ELSE":54,"LLAVIZQ":55,"LLAVDER":56,"SWITCH":57,"cases":58,"case":59,"CASE":60,"DOSPUNTOS":61,"DEFAULT":62,"WHILE":63,"DO":64,"FOR":65,"inicio":66,"condicion":67,"final":68,"expresionOrExclusivo":69,"BREAK":70,"CONTINUE":71,"RETURN":72,"llamada":73,"listaArgumentos":74,"argumento":75,"DOLAR":76,"PRINT":77,"TRY":78,"CATCH":79,"THROW":80,"STRC":81,"expresionPostfix":82,"expresionAsignacion":83,"expresionOr":84,"XOR":85,"expresionAnd":86,"OR":87,"expresionIgualdad":88,"AND":89,"expresionRelacional":90,"TRIPLEIGUAL":91,"IGUALA":92,"DIFERENTEDE":93,"expresionAditiva":94,"MAYOR":95,"MAYORIGUAL":96,"MENOR":97,"MENORIGUAL":98,"expresionMultiplicativa":99,"MAS":100,"MENOS":101,"expresionCasteo":102,"POR":103,"DIVIDIDO":104,"MODULO":105,"expresionUnaria":106,"NOT":107,"POWER":108,"expresionPrimaria":109,"expresionListaArgumentos":110,"PUNTO":111,"OPINCREMENTO":112,"OPDECREMENTO":113,"CADENA":114,"CARACTER":115,"ENTERO":116,"DECIMAL":117,"TRUE":118,"FALSE":119,"NULL":120,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"PCOMA",25:"IMPORT",27:"COMA",28:"ARCHIVO",31:"IGUAL",33:"IDENTIFICADOR",34:"DPIGUAL",35:"CORIZQ",36:"CORDER",38:"INTEGER",39:"DOUBLE",40:"CHAR",41:"BOOLEAN",42:"VOID",43:"VAR",44:"CONST",45:"GLOBAL",46:"DEFINE",47:"AS",49:"PARIZQ",50:"PARDER",53:"IF",54:"ELSE",55:"LLAVIZQ",56:"LLAVDER",57:"SWITCH",60:"CASE",61:"DOSPUNTOS",62:"DEFAULT",63:"WHILE",64:"DO",65:"FOR",70:"BREAK",71:"CONTINUE",72:"RETURN",76:"DOLAR",77:"PRINT",78:"TRY",79:"CATCH",80:"THROW",81:"STRC",85:"XOR",87:"OR",89:"AND",91:"TRIPLEIGUAL",92:"IGUALA",93:"DIFERENTEDE",95:"MAYOR",96:"MAYORIGUAL",97:"MENOR",98:"MENORIGUAL",100:"MAS",101:"MENOS",103:"POR",104:"DIVIDIDO",105:"MODULO",107:"NOT",108:"POWER",111:"PUNTO",112:"OPINCREMENTO",113:"OPDECREMENTO",114:"CADENA",115:"CARACTER",116:"ENTERO",117:"DECIMAL",118:"TRUE",119:"FALSE",120:"NULL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[7,2],[26,3],[26,1],[8,4],[8,2],[8,4],[8,4],[8,6],[29,3],[29,1],[37,1],[37,1],[37,1],[37,1],[37,1],[30,3],[30,1],[32,1],[32,1],[32,1],[10,6],[11,6],[12,6],[12,5],[12,6],[12,5],[12,8],[12,7],[48,3],[48,1],[52,2],[52,2],[52,4],[13,5],[13,7],[13,7],[51,3],[14,7],[58,2],[58,1],[59,4],[59,3],[15,5],[16,6],[17,7],[66,2],[66,1],[67,2],[67,1],[68,1],[68,0],[18,1],[19,1],[20,2],[73,4],[74,3],[74,1],[74,0],[75,3],[75,1],[75,2],[21,4],[22,8],[23,3],[24,1],[83,1],[83,3],[69,1],[69,3],[84,1],[84,3],[86,1],[86,3],[88,1],[88,3],[88,3],[88,3],[90,1],[90,3],[90,3],[90,3],[90,3],[94,1],[94,3],[94,3],[99,1],[99,3],[99,3],[99,3],[102,1],[102,4],[106,1],[106,2],[106,2],[106,3],[82,1],[82,4],[82,3],[82,3],[82,4],[82,3],[82,2],[82,2],[110,1],[110,3],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,2],[109,2],[109,2],[109,1],[109,3],[109,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2: case 60:

		this.$ = $$[$0-1];
		this.$.push($$[$0]);
	
break;
case 3: case 38: case 51: case 61: case 78:

		this.$ = [$$[$0]];
	
break;
case 4:

		this.$ = $$[$0];
		console.log("IMPORTS |||| " + this.$);
	
break;
case 5:

		this.$ = $$[$0-1];
		console.log("DECLARACION |||| " + this.$);
	
break;
case 6:

		this.$ = $$[$0-1];
		console.log("ASIGNACION  |||| " + this.$);
	
break;
case 7:

		this.$ = $$[$0-1];
		console.log("DEFINICION ESTRUCTURA |||| " + this.$);
	
break;
case 8:

		this.$ = $$[$0];
		console.log("FUNCION |||| " + this.$);
	
break;
case 9:

		this.$ = $$[$0];
		console.log("IF |||| " + this.$);
	
break;
case 10:

		this.$ = $$[$0];
		console.log("SWITCH |||| " + this.$);
	
break;
case 11:

		this.$ = $$[$0];
		console.log("WHILE |||| " + this.$);
	
break;
case 12:

		this.$ = $$[$0];
		console.log("DOWHILE |||| " + this.$);
	
break;
case 13:

		this.$ = $$[$0];
		console.log("FOR |||| " + this.$);
	
break;
case 14: case 15: case 16: case 19:

		this.$ = $$[$0-1];
	
break;
case 17:

		this.$ = $$[$0-1];
		console.log(this.$);
	
break;
case 18: case 31: case 32: case 33: case 34: case 35: case 36: case 39: case 40: case 41: case 81: case 86: case 87: case 89: case 91: case 93: case 95: case 99: case 104: case 107: case 111: case 113: case 117: case 125: case 127: case 128: case 129: case 137:

		this.$ = $$[$0];
	
break;
case 20:

		this.$ = $$[$0-1];
		console.log("EXPRESION |||| " + this.$);
	
break;
case 21:

			console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			//this.$ = "ERROR"
	
break;
case 22:

			this.$ = $$[$0];
			//todo crear nodo (import)
		
break;
case 23:

			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 24:

			this.$ = [$$[$0]];
		
break;
case 25:
  // declaracion tipo 1
		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 26:
  // declaracion tipo 5
		this.$ = $$[$0-1] + $$[$0];
	
break;
case 27:
  // declaracion tipo 2, 3 y 4 - incluye estructuras
		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 28:
  // declaracion estructuras
		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] ;
	
break;
case 29:
  // declaracion arreglos de estructuras
		this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0] ;
	
break;
case 30: case 88: case 90: case 92: case 94: case 96: case 97: case 98: case 100: case 101: case 102: case 103: case 105: case 106: case 108: case 109: case 110: case 116: case 119: case 120: case 122: case 138: case 139:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 37: case 50: case 77:

		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 42:

		this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
		console.log("ASIGNACION POSICION ARREGLO -- " + this.$);
	
break;
case 43:

		this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 44: case 46:

		this.$ = $$[$0-5] + " " + $$[$0-4] + "(" + $$[$0-2] + ")" + $$[$0];
		// todo - crear nodo FUNCION
	
break;
case 45: case 47:

		this.$ = $$[$0-4] + " " + $$[$0-3] + "( )" + $$[$0];
		// todo - crear nodo FUNCION
	
break;
case 48:

		this.$ = $$[$0-7] + $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
		// todo - crear nodo FUNCION
	
break;
case 49:

		this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
		// todo - crear nodo FUNCION
	
break;
case 52: case 53:

		this.$ = $$[$0-1] + " " + $$[$0];
	
break;
case 54:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + " " + $$[$0];
	
break;
case 55:
 
        this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
			// todo -- crear nodo de if
		
break;
case 56: case 57:
 
		this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
			// todo -- crear nodo de if
		
break;
case 58:

		// todo -- crear lista de instrucciones
		this.$ = $$[$0-1];
	
break;
case 59:

		this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] +$$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
		// todo - crear nodo switch
	
break;
case 62:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] +$$[$0];
		// todo - crear nodo case
	
break;
case 63:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0]
		// todo - crear nodo case default
	
break;
case 64:

		this.$ = $$[$0-4] + $$[$0-3] + $$[$0-2] +$$[$0-1] + $$[$0];
	
break;
case 65:

		this.$ = $$[$0-5] + $$[$0-4] + $$[$0-3] +$$[$0-2] + $$[$0-1] + $$[$0];
		// todo - crear nodo dowhile
	
break;
case 66:

		this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] +$$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
		// todo - crear nodo for
	
break;
case 67: case 69:
 
		this.$ = $$[$0-1] + $$[$0];
	
break;
case 68: case 70:
 this.$ = ""; 
break;
case 71:
 
		this.$ = $$[$0];
	
break;
case 72:
 this.$ = "";
break;
case 73:

		this.$ = $$[$0];
		// todo - crear nodo break
	
break;
case 74:

		this.$ = $$[$0];
		// todo - crear nodo continue
	
break;
case 75:

		this.$ = $$[$0-1] + " " + $$[$0];
		// todo - crear nodo return
	
break;
case 76:

		this.$ = $$[$0-3] + "(" + $$[$0-1] + ")";
		console.log("LLAMADA  -- " +this.$);
		// todo - crear nodo llamada
	
break;
case 79:

		this.$ = "";
	
break;
case 80:

		this.$ = $$[$0-2] + "=" + $$[$0];
	
break;
case 82:

		this.$ = $$[$0-1] + $$[$0];
		console.log("ARGUMENTO DOLAR " + this.$);
	
break;
case 83: case 112: case 118: case 121:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 84:

		this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] +$$[$0-1] + $$[$0];
	
break;
case 85:

		this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
	
break;
case 114: case 115: case 123: case 124: case 134: case 135: case 136:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 126:

		this.$ = $$[$0-2]+ $$[$0-1] + $$[$0];
	
break;
case 130: case 131:

		this.$ = Number($$[$0]);
	
break;
case 132: case 133:

		this.$ = $$[$0]
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,76:$Vm,77:$Vn,78:$Vo,80:$Vp,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{1:[3]},{2:$V0,5:[1,72],6:73,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,76:$Vm,77:$Vn,78:$Vo,80:$Vp,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o($VA,[2,3]),o($VA,[2,4]),{9:[1,74]},{9:[1,75]},{9:[1,76]},o($VA,[2,8]),o($VA,[2,9]),o($VA,[2,10]),o($VA,[2,11]),o($VA,[2,12]),o($VA,[2,13]),{9:[1,77]},{9:[1,78]},{9:[1,79]},{9:[1,80]},o($VA,[2,18]),{9:[1,81]},{9:[1,82]},{9:[1,83]},{26:84,28:[1,85]},{30:86,33:[1,87]},{33:[1,88]},o([9,31,49,85,87,89,91,92,93,95,96,97,98,100,101,103,104,105,108,111,112,113],$VB,{30:89,33:[1,91],35:[1,90]}),{33:[1,92]},{49:[1,93]},{49:[1,94]},{49:[1,95]},{51:96,55:$VC},{49:[1,98]},{9:[2,73]},{9:[2,74]},{24:99,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{49:[1,101]},{51:102,55:$VC},{81:[1,103]},o([9,36,50,61],[2,86],{31:$VE}),{33:[2,31],35:[1,105]},{33:[2,39]},{33:[2,40]},{33:[2,41]},o($VF,[2,87],{85:$VG}),o($VH,[2,32]),o($VH,[2,33]),o($VH,[2,34]),o($VH,[2,35]),o($VH,[2,36]),o($VI,[2,89],{87:$VJ}),o($VK,[2,91],{89:$VL}),o($VM,[2,93],{91:$VN,92:$VO,93:$VP}),o($VQ,[2,95],{95:$VR,96:$VS,97:$VT,98:$VU}),o($VV,[2,99],{100:$VW,101:$VX}),o($VY,[2,104],{103:$VZ,104:$V_,105:$V$}),o($V01,[2,107]),o($V01,[2,111],{108:$V11}),{24:123,33:$VD,37:122,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o($V21,[2,113],{35:$V31,49:$V41,111:$V51,112:$V61,113:$V71}),{33:$VD,49:$V81,55:$Ve,76:$Vm,81:$Vq,82:58,101:$Vr,106:129,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$V81,55:$Ve,76:$Vm,81:$Vq,82:58,101:$Vr,106:131,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o($V91,[2,117]),o($V91,[2,128]),o($V91,[2,129]),o($V91,[2,130]),o($V91,[2,131]),o($V91,[2,132]),o($V91,[2,133]),{33:[1,132]},{33:[1,133],37:134,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7},o($V91,[2,137]),{33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:136,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,110:135,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{1:[2,1]},o($VA,[2,2]),o($VA,[2,5]),o($VA,[2,6]),o($VA,[2,7]),o($VA,[2,14]),o($VA,[2,15]),o($VA,[2,16]),o($VA,[2,17]),o($VA,[2,19]),o($VA,[2,20]),o($VA,[2,21]),o($VA,[2,22],{27:[1,137]}),o($Va1,[2,24]),{9:[2,26],27:$Vb1,31:[1,138]},o($Vc1,$Vd1,{49:[1,140]}),{34:[1,141]},{27:$Vb1,31:[1,142]},{24:144,33:$VD,36:[1,143],49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o([27,31],$Vd1,{49:[1,145]}),{47:[1,146]},{24:147,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{24:148,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{24:149,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{63:[1,150]},{2:$V0,4:151,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,76:$Vm,77:$Vn,78:$Vo,80:$Vp,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{8:153,9:[1,154],29:155,32:24,33:[1,156],37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,66:152},{9:[2,75]},o($V91,$VB),{24:157,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{79:[1,158]},{33:$VD,49:$V81,55:$Ve,76:$Vm,81:$Vq,82:159,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,69:160,76:$Vm,81:$Vq,82:58,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{36:[1,161]},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,84:162,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,86:163,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,88:164,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,90:165,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,90:166,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,90:167,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,94:168,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,94:169,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,94:170,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,94:171,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,99:172,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,99:173,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,101:$Vr,102:174,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,101:$Vr,102:175,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,101:$Vr,102:176,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$V81,55:$Ve,76:$Vm,81:$Vq,82:58,101:$Vr,106:177,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{50:[1,178]},{50:[1,179]},{24:180,33:$VD,36:[1,181],49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:$VD,49:$Vc,50:[1,182],55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:136,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,110:183,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:[1,184]},o($V91,[2,123]),o($V91,[2,124]),o($V21,[2,114]),{24:123,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o($V21,[2,115]),o($V91,[2,134]),o($V91,[2,135]),o($V91,[2,136]),{27:$Ve1,56:[1,185]},o($Vf1,[2,125],{31:$VE}),{28:[1,187]},{24:188,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:[1,189]},{29:193,33:$Vg1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,48:190,50:[1,191],52:192},{24:195,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{24:196,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{33:[1,197]},{36:[1,198]},{29:193,33:$Vg1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,48:199,50:[1,200],52:192},{35:[1,201]},{50:[1,202]},{50:[1,203]},{50:[1,204]},{49:[1,205]},{2:$V0,6:73,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,56:[1,206],57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,76:$Vm,77:$Vn,78:$Vo,80:$Vp,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{9:[1,209],33:$VD,49:$Vc,55:$Ve,67:207,69:208,76:$Vm,81:$Vq,82:58,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{9:[1,210]},o($Vh1,[2,68]),{30:86,33:$Vi1},{30:89,33:$Vi1,35:[1,212]},{50:[1,213]},{49:[1,214]},{9:[2,85],35:$V31,49:$V41,111:$V51,112:$V61,113:$V71},o($VF,[2,88],{85:$VG}),{33:[2,30]},o($VI,[2,90],{87:$VJ}),o($VK,[2,92],{89:$VL}),o($VM,[2,94],{91:$VN,92:$VO,93:$VP}),o($VQ,[2,96],{95:$VR,96:$VS,97:$VT,98:$VU}),o($VQ,[2,97],{95:$VR,96:$VS,97:$VT,98:$VU}),o($VQ,[2,98],{95:$VR,96:$VS,97:$VT,98:$VU}),o($VV,[2,100],{100:$VW,101:$VX}),o($VV,[2,101],{100:$VW,101:$VX}),o($VV,[2,102],{100:$VW,101:$VX}),o($VV,[2,103],{100:$VW,101:$VX}),o($VY,[2,105],{103:$VZ,104:$V_,105:$V$}),o($VY,[2,106],{103:$VZ,104:$V_,105:$V$}),o($V01,[2,108]),o($V01,[2,109]),o($V01,[2,110]),o($V01,[2,116],{108:$V11}),{33:$VD,49:$Vc,55:$Ve,76:$Vm,81:$Vq,82:58,101:$Vr,102:215,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o($V91,[2,139]),{36:[1,216]},o($V91,[2,119]),o($V91,[2,120]),{27:$Ve1,50:[1,217]},o($V91,[2,122]),o($V91,[2,138]),{33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:218,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o($Va1,[2,23]),{9:[2,25]},o($Vc1,[2,37]),{27:$Vj1,50:[1,219]},{51:221,55:$VC},o($Vk1,[2,51]),{33:[1,222]},{33:[1,223],35:[1,224]},{9:[2,27]},{9:[2,28]},{31:$Vl1,49:[1,226]},{31:[1,227]},{27:$Vj1,50:[1,228]},{51:229,55:$VC},{29:193,33:$Vg1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,48:230,52:192},{51:231,55:$VC},{55:[1,232]},{51:233,55:$VC},{24:234,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o([2,5,25,33,38,39,40,41,42,43,44,45,46,49,53,54,55,56,57,60,62,63,64,65,70,71,72,76,77,78,79,80,81,101,107,114,115,116,117,118,119,120],[2,58]),{24:236,33:$VD,49:$Vc,50:[2,72],55:$Ve,68:235,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{9:[1,237],85:$VG},o($Vm1,[2,70]),o($Vh1,[2,67]),o($Vc1,$Vd1),{36:[1,238]},{9:[2,83]},{33:[1,239]},o($V01,[2,112]),o($V91,[2,118]),o($V91,[2,121]),o($Vf1,[2,126],{31:$VE}),{51:240,55:$VC},{29:193,33:$Vg1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,52:241},o($VA,[2,45]),o($Vk1,[2,52]),o($Vk1,[2,53]),{36:[1,242]},{24:243,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{29:193,33:$Vg1,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,48:244,50:[1,245],52:192},{24:246,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{51:247,55:$VC},o($VA,[2,47]),{27:$Vj1,36:[1,248]},o($VA,[2,55],{54:[1,249]}),{58:250,59:251,60:$Vn1,62:$Vo1},o($VA,[2,64]),{50:[1,254]},{50:[1,255]},{50:[2,71]},o($Vm1,[2,69]),{33:[1,256]},{33:[1,257]},o($VA,[2,44]),o($Vk1,[2,50]),{33:[1,258]},{9:[2,29]},{27:$Vj1,50:[1,259]},{51:260,55:$VC},{9:[2,42]},o($VA,[2,46]),{9:[2,43]},{13:261,51:262,53:$Vd,55:$VC},{56:[1,263],59:264,60:$Vn1,62:$Vo1},o($Vp1,[2,61]),{24:265,33:$VD,49:$Vc,55:$Ve,69:43,76:$Vm,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},{61:[1,266]},o($VA,[2,65]),{51:267,55:$VC},{31:$Vl1},{50:[1,268]},o($Vk1,[2,54]),{51:269,55:$VC},o($VA,[2,49]),o($VA,[2,56]),o($VA,[2,57]),o($VA,[2,59]),o($Vp1,[2,60]),{61:[1,270]},{2:$V0,4:271,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,76:$Vm,77:$Vn,78:$Vo,80:$Vp,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o($VA,[2,66]),{51:272,55:$VC},o($VA,[2,48]),{2:$V0,4:273,6:3,7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,25:$V1,29:23,32:24,33:$V2,37:39,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,69:43,70:$Vj,71:$Vk,72:$Vl,76:$Vm,77:$Vn,78:$Vo,80:$Vp,81:$Vq,82:58,83:38,84:49,86:50,88:51,90:52,94:53,99:54,101:$Vr,102:55,106:56,107:$Vs,109:61,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz},o($Vp1,[2,63],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,29:23,32:24,83:38,37:39,69:43,84:49,86:50,88:51,90:52,94:53,99:54,102:55,106:56,82:58,109:61,6:73,2:$V0,25:$V1,33:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,70:$Vj,71:$Vk,72:$Vl,76:$Vm,77:$Vn,78:$Vo,80:$Vp,81:$Vq,101:$Vr,107:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz}),o($VA,[2,84]),o($Vp1,[2,62],{7:4,8:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:16,21:17,22:18,23:19,24:20,29:23,32:24,83:38,37:39,69:43,84:49,86:50,88:51,90:52,94:53,99:54,102:55,106:56,82:58,109:61,6:73,2:$V0,25:$V1,33:$V2,38:$V3,39:$V4,40:$V5,41:$V6,42:$V7,43:$V8,44:$V9,45:$Va,46:$Vb,49:$Vc,53:$Vd,55:$Ve,57:$Vf,63:$Vg,64:$Vh,65:$Vi,70:$Vj,71:$Vk,72:$Vl,76:$Vm,77:$Vn,78:$Vo,80:$Vp,81:$Vq,101:$Vr,107:$Vs,114:$Vt,115:$Vu,116:$Vv,117:$Vw,118:$Vx,119:$Vy,120:$Vz})],
defaultActions: {32:[2,73],33:[2,74],40:[2,39],41:[2,40],42:[2,41],72:[2,1],99:[2,75],161:[2,30],188:[2,25],195:[2,27],196:[2,28],213:[2,83],236:[2,71],243:[2,29],246:[2,42],248:[2,43]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
                                            console.log("comment one line");
                                            //console.log(yy_.yytext);
                                        
break;
case 3:
                                            console.log("comment ML");
                                            //console.log(yy_.yytext);
                                        
break;
case 4:return 120;
break;
case 5:return 38;
break;
case 6:return 39;
break;
case 7:return 40;
break;
case 8:return 41;
break;
case 9:return 25;
break;
case 10:return 43;
break;
case 11:return 44;
break;
case 12:return 45;
break;
case 13:return 118;
break;
case 14:return 119;
break;
case 15:return 53;
break;
case 16:return 54;
break;
case 17:return 57;
break;
case 18:return 60;
break;
case 19:return 62;
break;
case 20:return 70;
break;
case 21:return 71;
break;
case 22:return 72;
break;
case 23:return 77;
break;
case 24:return 'PUBLIC';
break;
case 25:return 'PRIVATE';
break;
case 26:return 42;
break;
case 27:return 65;
break;
case 28:return 63;
break;
case 29:return 46;
break;
case 30:return 47;
break;
case 31:return 81;
break;
case 32:return 64;
break;
case 33:return 78;
break;
case 34:return 79;
break;
case 35:return 80;
break;
case 36:return 27;
break;
case 37:return 111;
break;
case 38:return 9;
break;
case 39:return 49;
break;
case 40:return 50;
break;
case 41:return 35;
break;
case 42:return 36;
break;
case 43:return 55;
break;
case 44:return 56;
break;
case 45:return 34;
break;
case 46:return 61;
break;
case 47:return 112;
break;
case 48:return 100;
break;
case 49:return 113;
break;
case 50:return 101;
break;
case 51:return 103;
break;
case 52:return 104;
break;
case 53:return 105;
break;
case 54:return 108;
break;
case 55:return 85;
break;
case 56:return 87;
break;
case 57:return 89;
break;
case 58:return 91;
break;
case 59:return 92;
break;
case 60:return 93;
break;
case 61:return 98;
break;
case 62:return 96;
break;
case 63:return 31;
break;
case 64:return 95;
break;
case 65:return 97;
break;
case 66:return 107;
break;
case 67:return 76;
break;
case 68: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 114; 
							
break;
case 69: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 115; 
							
break;
case 70:return 117;
break;
case 71:return 116;
break;
case 72:return 28;
break;
case 73:return 33;
break;
case 74:return 'TIPO_NOMBRE';
break;
case 75:return 5;
break;
case 76: 
								console.error('Error L√©xico: ' + yy_.yytext + 
								', en la linea: ' + yy_.yylloc.first_line + ', y la columna: ' + yy_.yylloc.first_column); 
							
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::=)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:\^)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!)/i,/^(?:\$)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z√±√ë^\']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z0-9\.\-√±√ë])+[j])/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_√±√ë]*)/i,/^(?:\w+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsharp;
exports.Parser = jsharp.Parser;
exports.parse = function () { return jsharp.parse.apply(jsharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}