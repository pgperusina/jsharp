/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,15],$V3=[1,16],$V4=[1,17],$V5=[1,18],$V6=[1,19],$V7=[1,20],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[2,5,11,25,26,27,28,29,30,31,32,33,47],$Vc=[20,23,36],$Vd=[8,13],$Ve=[8,13,17],$Vf=[1,55],$Vg=[1,50],$Vh=[1,62],$Vi=[1,53],$Vj=[1,52],$Vk=[1,56],$Vl=[1,57],$Vm=[1,58],$Vn=[1,59],$Vo=[1,60],$Vp=[1,61],$Vq=[1,68],$Vr=[8,13,24,36],$Vs=[1,69],$Vt=[8,13,17,24,36,47],$Vu=[1,70],$Vv=[8,13,17,24,36,47,87],$Vw=[1,71],$Vx=[8,13,17,24,36,47,87,89],$Vy=[1,72],$Vz=[8,13,17,24,36,47,87,89,91],$VA=[1,73],$VB=[1,74],$VC=[1,75],$VD=[8,13,17,24,36,47,87,89,91,93,94,95],$VE=[1,76],$VF=[1,77],$VG=[1,78],$VH=[1,79],$VI=[8,13,17,24,36,47,87,89,91,93,94,95,97,98,99,100],$VJ=[1,80],$VK=[1,81],$VL=[8,13,17,24,36,47,87,89,91,93,94,95,97,98,99,100,102,103],$VM=[1,82],$VN=[1,83],$VO=[1,84],$VP=[8,13,17,24,36,47,87,89,91,93,94,95,97,98,99,100,102,103,105,106,107],$VQ=[1,94],$VR=[8,13,17,23,24,34,36,41,47,87,89,91,93,94,95,97,98,99,100,102,103,105,106,107,113,114,115],$VS=[13,36],$VT=[1,125],$VU=[13,36,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"instrucciones":4,"EOF":5,"instruccion":6,"imports":7,"PCOMA":8,"declaraciones":9,"definicionFuncion":10,"IMPORT":11,"import":12,"COMA":13,"ARCHIVO":14,"definicionTipo":15,"listaIds":16,"IGUAL":17,"expresion":18,"calificadorTipo":19,"IDENTIFICADOR":20,"DPIGUAL":21,"tipo":22,"CORIZQ":23,"CORDER":24,"INTEGER":25,"DOUBLE":26,"CHAR":27,"BOOLEAN":28,"VOID":29,"TIPO_NOMBRE":30,"VAR":31,"CONST":32,"GLOBAL":33,"PARIZQ":34,"listaParametros":35,"PARDER":36,"bloqueInstrucciones":37,"parametro":38,"type":39,"ids_anidados":40,"PUNTO":41,"expresionAcceso":42,"if":43,"IF":44,"ELSE":45,"LLAVIZQ":46,"LLAVDER":47,"switch":48,"SWITCH":49,"cases":50,"case":51,"CASE":52,"DOSPUNTOS":53,"DEFAULT":54,"while":55,"WHILE":56,"doWhile":57,"DO":58,"for":59,"FOR":60,"inicio":61,"condicion":62,"final":63,"declaracion":64,"break":65,"BREAK":66,"continue":67,"CONTINUE":68,"return":69,"RETURN":70,"llamada":71,"listaArgumentos":72,"argumento":73,"DOLAR":74,"print":75,"PRINT":76,"trycatch":77,"TRY":78,"CATCH":79,"throw":80,"THROW":81,"STRC":82,"accesoArreglo":83,"expresionAsignacion":84,"expresionOrExclusivo":85,"expresionOr":86,"XOR":87,"expresionAnd":88,"OR":89,"expresionIgualdad":90,"AND":91,"expresionRelacional":92,"TRIPLEIGUAL":93,"IGUALA":94,"DIFERENTEDE":95,"expresionAditiva":96,"MAYOR":97,"MAYORIGUAL":98,"MENOR":99,"MENORIGUAL":100,"expresionMultiplicativa":101,"MAS":102,"MENOS":103,"expresionCasteo":104,"POR":105,"DIVIDIDO":106,"MODULO":107,"expresionUnaria":108,"expresionPostfix":109,"NOT":110,"expresionPrimaria":111,"expresionListaArgumentos":112,"POWER":113,"OPINCREMENTO":114,"OPDECREMENTO":115,"CADENA":116,"CARACTER":117,"ENTERO":118,"DECIMAL":119,"TRUE":120,"FALSE":121,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PCOMA",11:"IMPORT",13:"COMA",14:"ARCHIVO",17:"IGUAL",20:"IDENTIFICADOR",21:"DPIGUAL",23:"CORIZQ",24:"CORDER",25:"INTEGER",26:"DOUBLE",27:"CHAR",28:"BOOLEAN",29:"VOID",30:"TIPO_NOMBRE",31:"VAR",32:"CONST",33:"GLOBAL",34:"PARIZQ",36:"PARDER",41:"PUNTO",42:"expresionAcceso",44:"IF",45:"ELSE",46:"LLAVIZQ",47:"LLAVDER",49:"SWITCH",52:"CASE",53:"DOSPUNTOS",54:"DEFAULT",56:"WHILE",58:"DO",60:"FOR",64:"declaracion",66:"BREAK",68:"CONTINUE",70:"RETURN",74:"DOLAR",76:"PRINT",78:"TRY",79:"CATCH",81:"THROW",82:"STRC",87:"XOR",89:"OR",91:"AND",93:"TRIPLEIGUAL",94:"IGUALA",95:"DIFERENTEDE",97:"MAYOR",98:"MAYORIGUAL",99:"MENOR",100:"MENORIGUAL",102:"MAS",103:"MENOS",105:"POR",106:"DIVIDIDO",107:"MODULO",110:"NOT",113:"POWER",114:"OPINCREMENTO",115:"OPDECREMENTO",116:"CADENA",117:"CARACTER",118:"ENTERO",119:"DECIMAL",120:"TRUE",121:"FALSE"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,2],[7,2],[12,3],[12,1],[9,4],[9,2],[9,4],[15,3],[15,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[16,3],[16,1],[19,1],[19,1],[19,1],[10,6],[35,3],[35,1],[38,2],[39,3],[39,1],[40,3],[40,1],[43,5],[43,7],[43,7],[37,3],[48,7],[50,2],[50,1],[51,4],[51,3],[55,5],[57,6],[59,7],[61,2],[61,1],[62,2],[62,1],[63,1],[63,0],[65,1],[67,1],[69,2],[71,4],[72,3],[72,1],[72,0],[73,3],[73,1],[73,2],[75,4],[77,8],[80,3],[83,4],[18,1],[18,3],[84,1],[84,3],[85,1],[85,3],[86,1],[86,3],[88,1],[88,3],[90,1],[90,3],[90,3],[90,3],[92,1],[92,3],[92,3],[92,3],[92,3],[96,1],[96,3],[96,3],[101,1],[101,3],[101,3],[101,3],[104,1],[104,4],[108,1],[108,2],[108,2],[109,1],[109,4],[109,3],[109,4],[109,3],[109,2],[109,2],[109,2],[112,1],[112,3],[111,1],[111,1],[111,1],[111,1],[111,1],[111,1],[111,1],[111,3],[111,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2: case 40:

		this.$ = $$[$0-1];
		this.$.push($$[$0]);
	
break;
case 3: case 23: case 29: case 34: case 41:

		this.$ = [$$[$0]];
	
break;
case 4: case 5:

		this.$ = $$[$0-1];
		console.log(this.$);
	
break;
case 6: case 61: case 67:

		this.$ = $$[$0];
		console.log(this.$);
	
break;
case 7:

			console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			//this.$ = "ERROR"
	
break;
case 8:

			this.$ = $$[$0];
			//todo crear nodo (import)
		
break;
case 9:

			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 10:

			this.$ = [$$[$0]];
		
break;
case 11: case 13: case 94: case 99: case 101:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 12: case 96: case 97: case 103: case 104: case 105:

		this.$ = $$[$0-1] + $$[$0];
	
break;
case 14: case 68: case 70: case 72: case 74: case 76: case 78: case 79: case 80: case 82: case 83: case 84: case 85: case 87: case 88: case 90: case 91: case 92: case 100: case 102: case 115: case 116:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
	
break;
case 15: case 16: case 17: case 18: case 19: case 20: case 21: case 24: case 25: case 26: case 69: case 71: case 73: case 75: case 77: case 81: case 86: case 89: case 93: case 95: case 98: case 106: case 108: case 109: case 110:

		this.$ = $$[$0];
	
break;
case 22: case 28:

		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 27:

		this.$ = $$[$0-5] + " " + $$[$0-4] + "(" + $$[$0-2] + ")" + $$[$0];
		// todo - crear nodo FUNCION
	
break;
case 30:

		this.$ = $$[$0-1] + " " + $$[$0];
	
break;
case 31:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
		// todo - crear nodo tipo diferenciando array de variable
	
break;
case 32:

		this.$ = $$[$0];
		// todo - crear nodo tipo diferenciando array de variable
	
break;
case 33:

		this.$=[];
		this.$.push($$[$0-2]);
		this.$.push($$[$0]);
		console.log("IDS ANIDADOS!! -- " +this.$);
	
break;
case 35:
 
			console.log("IF -- " + $$[$0-4] + " " + $$[$0-2]);
			// todo -- crear nodo de if
		
break;
case 36:
 
			console.log("IF ELSE IF -- " + $$[$0-6] + " " + $$[$0-4] + " ELSE IF ");
			// todo -- crear nodo de if
		
break;
case 37:
 
			console.log("IF ELSE -- " + $$[$0-6] + " " + $$[$0-4] + " ELSE ");
			// todo -- crear nodo de if
		
break;
case 38:

		// todo -- crear lista de instrucciones
		this.$ = $$[$0-1];
		console.log("BLOQUE INSTRUCCIONES -- " + $$[$0-1]);
	
break;
case 39:

		console.log($$[$0-6] + " " + $$[$0-4] + " " + $$[$0-1]);
		// todo - crear nodo switch
	
break;
case 42:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
		// todo - crear nodo case
	
break;
case 43:

		this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
		// todo - crear nodo case default
	
break;
case 44:

		console.log($$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]);
		// todo - crear nodo while
	
break;
case 45:

		console.log($$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-1]);
		// todo - crear nodo dowhile
	
break;
case 46:

		console.log($$[$0-6] + " " + $$[$0-4] + ";" + $$[$0-3] + $$[$0-2] + " " + $$[$0]);
		// todo - crear nodo for
	
break;
case 47: case 49:
 this.$ = $$[$0-1];
break;
case 48:
 console.log("PCOMA INICIO FOR ---- " +yytext);
break;
case 50:
 console.log("PCOMA CONDICION FOR ---- " +yytext);
break;
case 51:
 this.$ = $$[$0];
break;
case 52:
 console.log("EMPTY FINAL FOR ---- " +yytext);
break;
case 53:

		this.$ = $$[$0];
		// todo - crear nodo break
	
break;
case 54:

		this.$ = $$[$0];
		// todo - crear nodo continue
	
break;
case 55:

		this.$ = $$[$0-1] + " " + $$[$0];
		// todo - crear nodo return
	
break;
case 56:

		this.$ = $$[$0-3] + "(" + $$[$0-1] + ")";
		console.log("LLAMADA  -- " +this.$);
		// todo - crear nodo llamada
	
break;
case 57:

		this.$ = $$[$0-2];
		this.$.push($$[$0]);
		console.log("ARGUMENTOS - " + this.$);
	
break;
case 58:

		this.$ = [$$[$0]];
		console.log("ARGUMENTO -- " + this.$);
	
break;
case 59:

		this.$ = "";
		console.log("ARGUMENTO EMPTY!!!!");
	
break;
case 60:

		this.$ = $$[$0-2] + "=" + $$[$0];
		console.log(this.$);
	
break;
case 62:

		this.$ = $$[$0-1] + $$[$0];
		console.log("ARGUMENTO DOLAR " + this.$);
	
break;
case 63:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
		console.log("FUNCION PRINT -- " +this.$);
	
break;
case 64:

		this.$ = $$[$0-6] + $$[$0-5] + $$[$0-4] + $$[$0-3] + $$[$0-2] + " " +$$[$0-1] + $$[$0];
		console.log(this.$);
	
break;
case 65:

		this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
		console.log(this.$);
	
break;
case 66:

		this.$ = $$[$0-3] + $$[$0-2] + $$[$0-1] + $$[$0];
		console.log("ACCESO A ARREGLO --" + this.$);
	
break;
case 107:

		this.$ = $$[$0-2]+ $$[$0-1] + $$[$0];
	
break;
case 111: case 112:

		this.$ = Number($$[$0]);
	
break;
case 113: case 114:

		this.$ = $$[$0]
	
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:$V1,15:9,19:10,22:11,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,33:$Va},{1:[3]},{2:$V0,5:[1,21],6:22,7:4,9:5,10:6,11:$V1,15:9,19:10,22:11,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,33:$Va},o($Vb,[2,3]),{8:[1,23]},{8:[1,24]},o($Vb,[2,6]),{8:[1,25]},{12:26,14:[1,27]},{16:28,20:[1,29]},{20:[1,30]},{20:[2,15],23:[1,31]},{20:[2,24]},{20:[2,25]},{20:[2,26]},o($Vc,[2,16]),o($Vc,[2,17]),o($Vc,[2,18]),o($Vc,[2,19]),o($Vc,[2,20]),o($Vc,[2,21]),{1:[2,1]},o($Vb,[2,2]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,7]),{8:[2,8],13:[1,32]},o($Vd,[2,10]),{8:[2,12],13:[1,34],17:[1,33]},o($Ve,[2,23],{34:[1,35]}),{21:[1,36]},{24:[1,37]},{14:[1,38]},{18:39,20:$Vf,34:$Vg,46:$Vh,84:40,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:[1,63]},{15:66,22:11,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,35:64,38:65},{18:67,20:$Vf,34:$Vg,46:$Vh,84:40,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:[2,14]},o($Vd,[2,9]),{8:[2,11],13:$Vq},o($Vr,[2,67],{17:$Vs}),o($Vt,[2,69],{87:$Vu}),o($Vv,[2,71],{89:$Vw}),o($Vx,[2,73],{91:$Vy}),o($Vz,[2,75],{93:$VA,94:$VB,95:$VC}),o($VD,[2,77],{97:$VE,98:$VF,99:$VG,100:$VH}),o($VI,[2,81],{102:$VJ,103:$VK}),o($VL,[2,86],{105:$VM,106:$VN,107:$VO}),o($VP,[2,89]),o($VP,[2,93]),{18:86,20:$Vf,22:85,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,34:$Vg,46:$Vh,84:40,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($VP,[2,95],{23:[1,87],34:[1,88],41:[1,89],113:[1,90],114:[1,91],115:[1,92]}),{20:$Vf,34:$VQ,46:$Vh,103:$Vi,108:93,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$VQ,46:$Vh,103:$Vi,108:95,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($VR,[2,98]),o($VR,[2,108]),o($VR,[2,109]),o($VR,[2,110]),o($VR,[2,111]),o($VR,[2,112]),o($VR,[2,113]),o($VR,[2,114]),{20:$Vf,34:$Vg,46:$Vh,84:97,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,112:96,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($Ve,[2,22]),{13:[1,99],36:[1,98]},o($VS,[2,29]),{20:[1,100]},{8:[2,13],13:$Vq},{20:$Vf,34:$Vg,46:$Vh,84:101,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,85:102,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,86:103,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,88:104,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,90:105,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,92:106,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,92:107,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,92:108,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,96:109,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,96:110,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,96:111,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,96:112,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,101:113,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,101:114,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,103:$Vi,104:115,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,103:$Vi,104:116,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,46:$Vh,103:$Vi,104:117,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{36:[1,118]},{13:$Vq,36:[1,119]},{18:120,20:$Vf,34:$Vg,46:$Vh,84:40,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:$Vf,34:$Vg,36:[1,121],46:$Vh,84:97,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,112:122,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},{20:[1,123]},o($VR,[2,103]),o($VR,[2,104]),o($VR,[2,105]),o($VP,[2,96]),{18:86,20:$Vf,34:$Vg,46:$Vh,84:40,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($VP,[2,97]),{13:$VT,47:[1,124]},o($VU,[2,106],{17:$Vs}),{37:126,46:[1,127]},{15:66,22:11,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,38:128},o($VS,[2,30]),o($Vr,[2,68],{17:$Vs}),o($Vt,[2,70],{87:$Vu}),o($Vv,[2,72],{89:$Vw}),o($Vx,[2,74],{91:$Vy}),o($Vz,[2,76],{93:$VA,94:$VB,95:$VC}),o($VD,[2,78],{97:$VE,98:$VF,99:$VG,100:$VH}),o($VD,[2,79],{97:$VE,98:$VF,99:$VG,100:$VH}),o($VD,[2,80],{97:$VE,98:$VF,99:$VG,100:$VH}),o($VI,[2,82],{102:$VJ,103:$VK}),o($VI,[2,83],{102:$VJ,103:$VK}),o($VI,[2,84],{102:$VJ,103:$VK}),o($VI,[2,85],{102:$VJ,103:$VK}),o($VL,[2,87],{105:$VM,106:$VN,107:$VO}),o($VL,[2,88],{105:$VM,106:$VN,107:$VO}),o($VP,[2,90]),o($VP,[2,91]),o($VP,[2,92]),{20:$Vf,34:$Vg,46:$Vh,103:$Vi,104:129,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($VR,[2,116]),{13:$Vq,24:[1,130]},o($VR,[2,100]),{13:$VT,36:[1,131]},o($VR,[2,102]),o($VR,[2,115]),{20:$Vf,34:$Vg,46:$Vh,84:132,85:41,86:42,88:43,90:44,92:45,96:46,101:47,103:$Vi,104:48,108:49,109:51,110:$Vj,111:54,116:$Vk,117:$Vl,118:$Vm,119:$Vn,120:$Vo,121:$Vp},o($Vb,[2,27]),{2:$V0,4:133,6:3,7:4,9:5,10:6,11:$V1,15:9,19:10,22:11,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,33:$Va},o($VS,[2,28]),o($VP,[2,94]),o($VR,[2,99]),o($VR,[2,101]),o($VU,[2,107],{17:$Vs}),{2:$V0,6:22,7:4,9:5,10:6,11:$V1,15:9,19:10,22:11,25:$V2,26:$V3,27:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,33:$Va,47:[1,134]},o($Vb,[2,38])],
defaultActions: {12:[2,24],13:[2,25],14:[2,26],21:[2,1],37:[2,14]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
                                            console.log("comment one line");
                                            //console.log(yy_.yytext);
                                        
break;
case 3:
                                            console.log("comment ML");
                                            //console.log(yy_.yytext);
                                        
break;
case 4:return 'NULL';
break;
case 5:return 25;
break;
case 6:return 26;
break;
case 7:return 27;
break;
case 8:return 28;
break;
case 9:return 11;
break;
case 10:return 31;
break;
case 11:return 32;
break;
case 12:return 33;
break;
case 13:return 120;
break;
case 14:return 121;
break;
case 15:return 44;
break;
case 16:return 45;
break;
case 17:return 49;
break;
case 18:return 52;
break;
case 19:return 54;
break;
case 20:return 66;
break;
case 21:return 68;
break;
case 22:return 70;
break;
case 23:return 76;
break;
case 24:return 'PUBLIC';
break;
case 25:return 'PRIVATE';
break;
case 26:return 29;
break;
case 27:return 60;
break;
case 28:return 56;
break;
case 29:return 'DEFINE';
break;
case 30:return 'AS';
break;
case 31:return 82;
break;
case 32:return 58;
break;
case 33:return 78;
break;
case 34:return 79;
break;
case 35:return 81;
break;
case 36:return 13;
break;
case 37:return 41;
break;
case 38:return 8;
break;
case 39:return 34;
break;
case 40:return 36;
break;
case 41:return 23;
break;
case 42:return 24;
break;
case 43:return 46;
break;
case 44:return 47;
break;
case 45:return 21;
break;
case 46:return 53;
break;
case 47:return 114;
break;
case 48:return 102;
break;
case 49:return 115;
break;
case 50:return 103;
break;
case 51:return 105;
break;
case 52:return 106;
break;
case 53:return 107;
break;
case 54:return 113;
break;
case 55:return 87;
break;
case 56:return 89;
break;
case 57:return 91;
break;
case 58:return 93;
break;
case 59:return 94;
break;
case 60:return 95;
break;
case 61:return 100;
break;
case 62:return 98;
break;
case 63:return 17;
break;
case 64:return 97;
break;
case 65:return 99;
break;
case 66:return 110;
break;
case 67:return 74;
break;
case 68: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 116; 
							
break;
case 69: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 117; 
							
break;
case 70:return 119;
break;
case 71:return 118;
break;
case 72:return 14;
break;
case 73:return 20;
break;
case 74:return 30;
break;
case 75:return 5;
break;
case 76: 
								console.error('Error L√©xico: ' + yy_.yytext + 
								', en la linea: ' + yy_.yylloc.first_line + ', y la columna: ' + yy_.yylloc.first_column); 
							
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::=)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:\^)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!)/i,/^(?:\$)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z√±√ë^\']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z0-9\.\-√±√ë])+[j])/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_√±√ë]*)/i,/^(?:([a-zA-Z])+)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsharp;
exports.Parser = jsharp.Parser;
exports.parse = function () { return jsharp.parse.apply(jsharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}