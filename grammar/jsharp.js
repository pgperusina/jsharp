/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsharp = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,16],$V1=[1,17],$V2=[1,20],$V3=[1,31],$V4=[1,21],$V5=[1,22],$V6=[1,33],$V7=[1,34],$V8=[1,35],$V9=[1,36],$Va=[1,37],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,27],$Vg=[1,28],$Vh=[1,29],$Vi=[1,30],$Vj=[2,5,20,29,30,32,33,37,38,39,40,41,43,49,50,53,55,56,57,58,62,63,64],$Vk=[30,35],$Vl=[2,33],$Vm=[1,52],$Vn=[1,60],$Vo=[1,70],$Vp=[1,73],$Vq=[1,63],$Vr=[1,64],$Vs=[1,66],$Vt=[1,67],$Vu=[1,68],$Vv=[1,69],$Vw=[1,71],$Vx=[1,72],$Vy=[26,30,35,42],$Vz=[2,35],$VA=[1,74],$VB=[8,22],$VC=[8,22,26],$VD=[2,37],$VE=[1,94],$VF=[1,95],$VG=[1,96],$VH=[1,97],$VI=[1,98],$VJ=[1,99],$VK=[1,100],$VL=[1,101],$VM=[1,102],$VN=[1,103],$VO=[1,104],$VP=[1,105],$VQ=[1,106],$VR=[1,107],$VS=[1,108],$VT=[1,109],$VU=[1,110],$VV=[1,111],$VW=[1,112],$VX=[8,22,45,54,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],$VY=[2,96],$VZ=[22,45],$V_=[1,118],$V$=[1,120],$V01=[8,30,44,74,89,90,91,92,93,94,95],$V11=[30,44,45,74,89,90,91,92,93,94,95],$V21=[8,22,45,54,71,72,73,74,79,80,81,82,83,84,85,86,87,88],$V31=[8,22,45,54,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,87,88],$V41=[8,22,45,54,71,72,79,80,81,86,87,88],$V51=[1,180],$V61=[1,181],$V71=[49,53,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"initial":3,"instrucciones":4,"EOF":5,"instruccion":6,"imports":7,"PCOMA":8,"declaracion":9,"if":10,"switch":11,"while":12,"doWhile":13,"for":14,"break":15,"continue":16,"return":17,"funcion":18,"llamada":19,"IMPORT":20,"import":21,"COMA":22,"ARCHIVO":23,"type":24,"lista_id":25,"IGUAL":26,"expresion":27,"ids_anidados":28,"VAR":29,"IDENTIFICADOR":30,"DPIGUAL":31,"CONST":32,"GLOBAL":33,"tipo":34,"CORIZQ":35,"CORDER":36,"INTEGER":37,"DOUBLE":38,"CHAR":39,"BOOLEAN":40,"VOID":41,"PUNTO":42,"IF":43,"PARIZQ":44,"PARDER":45,"bloqueInstrucciones":46,"ELSE":47,"LLAVIZQ":48,"LLAVDER":49,"SWITCH":50,"cases":51,"case":52,"CASE":53,"DOSPUNTOS":54,"DEFAULT":55,"WHILE":56,"DO":57,"FOR":58,"inicio":59,"condicion":60,"final":61,"BREAK":62,"CONTINUE":63,"RETURN":64,"cast":65,"listaParametros":66,"parametro":67,"listaArgumentos":68,"argumento":69,"$":70,"OPINCREMENTO":71,"OPDECREMENTO":72,"MAS":73,"MENOS":74,"POR":75,"DIVIDIDO":76,"MODULO":77,"POWER":78,"XOR":79,"OR":80,"AND":81,"MENORIGUAL":82,"MAYORIGUAL":83,"MENOR":84,"MAYOR":85,"IGUALA":86,"TRIPLEIGUAL":87,"DIFERENTEDE":88,"NOT":89,"ENTERO":90,"DECIMAL":91,"TRUE":92,"FALSE":93,"CADENA":94,"CARACTER":95,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PCOMA",20:"IMPORT",22:"COMA",23:"ARCHIVO",26:"IGUAL",29:"VAR",30:"IDENTIFICADOR",31:"DPIGUAL",32:"CONST",33:"GLOBAL",35:"CORIZQ",36:"CORDER",37:"INTEGER",38:"DOUBLE",39:"CHAR",40:"BOOLEAN",41:"VOID",42:"PUNTO",43:"IF",44:"PARIZQ",45:"PARDER",47:"ELSE",48:"LLAVIZQ",49:"LLAVDER",50:"SWITCH",53:"CASE",54:"DOSPUNTOS",55:"DEFAULT",56:"WHILE",57:"DO",58:"FOR",62:"BREAK",63:"CONTINUE",64:"RETURN",70:"$",71:"OPINCREMENTO",72:"OPDECREMENTO",73:"MAS",74:"MENOS",75:"POR",76:"DIVIDIDO",77:"MODULO",78:"POWER",79:"XOR",80:"OR",81:"AND",82:"MENORIGUAL",83:"MAYORIGUAL",84:"MENOR",85:"MAYOR",86:"IGUALA",87:"TRIPLEIGUAL",88:"DIFERENTEDE",89:"NOT",90:"ENTERO",91:"DECIMAL",92:"TRUE",93:"FALSE",94:"CADENA",95:"CARACTER"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[7,2],[21,3],[21,1],[9,4],[9,3],[9,4],[9,4],[9,4],[9,2],[24,3],[24,1],[34,1],[34,1],[34,1],[34,1],[34,1],[34,1],[28,3],[28,1],[25,3],[25,1],[10,5],[10,7],[10,7],[46,3],[11,7],[51,2],[51,1],[52,4],[52,3],[12,5],[13,6],[14,7],[59,2],[59,1],[60,2],[60,1],[61,1],[61,0],[15,1],[16,1],[17,2],[65,4],[18,6],[66,3],[66,1],[67,2],[19,4],[68,3],[68,1],[68,0],[69,3],[69,1],[69,2],[27,2],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 2: case 43:

		this.$ = $$[$0-1];
		this.$.push($$[$0]);
	
break;
case 3: case 35: case 37: case 44: case 62:

		this.$ = [$$[$0]];
	
break;
case 4:
 
		this.$ = $$[$0-1];
		console.log("INSTRUCCION IMPORTS " + $$[$0-1]);
	
break;
case 5:

		this.$ = $$[$0-1];
		//console.log("declaracion");
	
break;
case 6: case 7: case 8: case 9: case 10: case 14: case 28: case 29: case 30: case 31: case 32: case 33: case 91: case 97: case 98:

		this.$ = $$[$0];
	
break;
case 11: case 12: case 13:

		this.$ = $$[$0-1];
	
break;
case 15:

		this.$ = $$[$0-1];
		console.log("LLAMADA -- " + this.$);
	
break;
case 16:

			console.error('Error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
			//this.$ = "ERROR"
	
break;
case 17:

			this.$ = $$[$0];
			//todo crear nodo (import)
		
break;
case 18:

			this.$ = $$[$0-2];
			this.$.push($$[$0]);
		
break;
case 19:

			this.$ = [$$[$0]];
		
break;
case 20:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " = " + $$[$0];
		console.log("declaracion 1 --" + $$[$0-3] + " " + $$[$0-2] + " = " + $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 21:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
		console.log("ASIGNACION -- " + $$[$0-2] + $$[$0-1] + $$[$0]);
		// todo - crear nodo ASIGNACION
	
break;
case 22:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0];
		console.log("declaracion 2 --" + $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 23:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0];
		console.log("declaracion 3 --" + $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 24:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0];
		console.log("declaracion 4 --" + $$[$0-3] + " " + $$[$0-2] + " := " + $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 25:

		this.$ = $$[$0-1] + " " +  $$[$0];
		console.log("declaracion 5 --" + $$[$0-1] + " " +  $$[$0]);
		// todo - crear nodo declaracion
	
break;
case 26:

		this.$ = $$[$0-2] + $$[$0-1] + $$[$0];
		// todo - crear nodo tipo diferenciando array de variable
	
break;
case 27:

		this.$ = $$[$0];
		// todo - crear nodo tipo diferenciando array de variable
	
break;
case 34:

		this.$=$$[$0-2];
		this.$.push($$[$0]);
		console.log("IDS ANIDADOS!! -- " +this.$);
	
break;
case 36: case 61:

		this.$ = $$[$0-2];
		this.$.push($$[$0]);
	
break;
case 38:
 
			console.log("IF -- " + $$[$0-4] + " " + $$[$0-2]);
			// todo -- crear nodo de if
		
break;
case 39:
 
			console.log("IF ELSE IF -- " + $$[$0-6] + " " + $$[$0-4] + " ELSE IF ");
			// todo -- crear nodo de if
		
break;
case 40:
 
			console.log("IF ELSE -- " + $$[$0-6] + " " + $$[$0-4] + " ELSE ");
			// todo -- crear nodo de if
		
break;
case 41:

		// todo -- crear lista de instrucciones
		this.$ = $$[$0-1];
		console.log("BLOQUE INSTRUCCIONES -- " + $$[$0-1]);
	
break;
case 42:

		console.log($$[$0-6] + " " + $$[$0-4] + " " + $$[$0-1]);
		// todo - crear nodo switch
	
break;
case 45:

		this.$ = $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
		// todo - crear nodo case
	
break;
case 46:

		this.$ = $$[$0-2] + " " + $$[$0-1] + " " + $$[$0];
		// todo - crear nodo case default
	
break;
case 47:

		console.log($$[$0-4] + " " + $$[$0-3] + " " + $$[$0-2] + " " + $$[$0-1] + " " + $$[$0]);
		// todo - crear nodo while
	
break;
case 48:

		console.log($$[$0-5] + " " + $$[$0-4] + " " + $$[$0-3] + " " + $$[$0-1]);
		// todo - crear nodo dowhile
	
break;
case 49:

		console.log($$[$0-6] + " " + $$[$0-4] + ";" + $$[$0-3] + $$[$0-2] + " " + $$[$0]);
		// todo - crear nodo for
	
break;
case 50: case 52:
 this.$ = $$[$0-1];
break;
case 51:
 console.log("PCOMA INICIO FOR ---- " +yytext);
break;
case 53:
 console.log("PCOMA CONDICION FOR ---- " +yytext);
break;
case 54:
 this.$ = $$[$0];
break;
case 55:
 console.log("EMPTY FINAL FOR ---- " +yytext);
break;
case 56:

		this.$ = $$[$0];
		// todo - crear nodo break
	
break;
case 57:

		this.$ = $$[$0];
		// todo - crear nodo continue
	
break;
case 58:

		this.$ = $$[$0-1] + " " + $$[$0];
		// todo - crear nodo return
	
break;
case 59:

		/* this.$ = "(" + $$[$0-2] + ")" + " " + $$[$0]; */
		this.$ = $$[$0-3] + $$[$0-1];
		// todo - crear nodo CAST
	
break;
case 60:

		this.$ = $$[$0-5] + " " + $$[$0-4] + "(" + $$[$0-2] + ")" + $$[$0];
		console.log(this.$);
		// todo - crear nodo FUNCION
	
break;
case 63:

		this.$ = $$[$0-1] + " " + $$[$0];
	
break;
case 64:

		this.$ = $$[$0-3] + "(" + $$[$0-1] + ")";
		console.log(this.$);
		// todo - crear nodo llamada
	
break;
case 65:

		this.$ = $$[$0-2];
		this.$.push($$[$0]);
		console.log("ARGUMENTOS - " + this.$);
	
break;
case 66:

		this.$ = [$$[$0]];
		console.log("ARGUMENTO -- " + this.$);
	
break;
case 67:

		console.log("EMPTY ARGUMENTOS -- " + $$[$0]);
	
break;
case 68:

		this.$ = $$[$0-2] + "=" + $$[$0];
		console.log(this.$);
	
break;
case 69:

		this.$ = $$[$0];
		console.log(this.$);
	
break;
case 70:

		this.$ = $$[$0-1] + $$[$0];
		console.log(this.$);
	
break;
case 71:
 this.$ = $$[$0-1] + 1; 
break;
case 72:
 this.$ = $$[$0-1] - 1; 
break;
case 73:
 this.$ = $$[$0-2] + $$[$0]; 
break;
case 74:
 this.$ = $$[$0-2] - $$[$0]; 
break;
case 75:
 this.$ = $$[$0-2] * $$[$0]; 
break;
case 76:
 this.$ = $$[$0-2] / $$[$0]; 
break;
case 77:
 this.$ = $$[$0-2] % $$[$0]; 
break;
case 78:
 this.$ = $$[$0-2] * $$[$0-2]; /* todo - logica para power */
break;
case 79:
 this.$ = $$[$0-2] ^ $$[$0]; 
break;
case 80:
 this.$ = $$[$0-2] ||¬†$$[$0]; 
break;
case 81:
 this.$ = $$[$0-2] && $$[$0]; 
break;
case 82:
 this.$ = $$[$0-2] <= $$[$0]; 
break;
case 83:
 this.$ = $$[$0-2] >= $$[$0]; 
break;
case 84:
 this.$ = $$[$0-2] < $$[$0]; 
break;
case 85:
 this.$ = $$[$0-2] > $$[$0]; 
break;
case 86:
 this.$ = $$[$0-2] == $$[$0]; 
break;
case 87:
 this.$ = $$[$0-2] === $$[$0]; 
break;
case 88:
 this.$ = $$[$0-2] != $$[$0]; 
break;
case 89:
 this.$ = $$[$0] *-1; 
break;
case 90:
 this.$ = !$$[$0]; 
break;
case 92: case 93:
 this.$ = Number($$[$0]); 
break;
case 94: case 95:
 this.$ = Boolean($$[$0]); 
break;
case 96:
 this.$ = $$[$0]; 
break;
case 99:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,24:18,28:19,29:$V2,30:$V3,32:$V4,33:$V5,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,63:$Vh,64:$Vi},{1:[3]},{2:$V0,5:[1,38],6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,24:18,28:19,29:$V2,30:$V3,32:$V4,33:$V5,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,63:$Vh,64:$Vi},o($Vj,[2,3]),{8:[1,40]},{8:[1,41]},o($Vj,[2,6]),o($Vj,[2,7]),o($Vj,[2,8]),o($Vj,[2,9]),o($Vj,[2,10]),{8:[1,42]},{8:[1,43]},{8:[1,44]},o($Vj,[2,14]),{8:[1,45]},{8:[1,46]},{21:47,23:[1,48]},{25:49,30:[1,50]},o($Vk,$Vl,{26:[1,51],42:$Vm}),{30:[1,53]},{30:[1,54]},{30:[1,55]},{44:[1,56]},{44:[1,57]},{44:[1,58]},{46:59,48:$Vn},{44:[1,61]},{8:[2,56]},{8:[2,57]},{19:65,27:62,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($Vy,$Vz,{44:$VA}),{30:[2,27],35:[1,75]},o($Vk,[2,28]),o($Vk,[2,29]),o($Vk,[2,30]),o($Vk,[2,31]),o($Vk,[2,32]),{1:[2,1]},o($Vj,[2,2]),o($Vj,[2,4]),o($Vj,[2,5]),o($Vj,[2,11]),o($Vj,[2,12]),o($Vj,[2,13]),o($Vj,[2,15]),o($Vj,[2,16]),{8:[2,17],22:[1,76]},o($VB,[2,19]),{8:[2,25],22:[1,78],26:[1,77]},o($VC,$VD,{44:[1,79]}),{19:65,27:80,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{30:[1,81]},{31:[1,82]},{31:[1,83]},{31:[1,84]},{19:65,27:85,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:86,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:87,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{56:[1,88]},{2:$V0,4:89,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,24:18,28:19,29:$V2,30:$V3,32:$V4,33:$V5,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,63:$Vh,64:$Vi},{8:[1,92],9:91,24:93,28:19,29:$V2,30:$VE,32:$V4,33:$V5,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,59:90},{8:[2,58],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{19:65,27:113,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:114,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($VX,[2,91]),o($VX,[2,92]),o($VX,[2,93]),o($VX,[2,94]),o($VX,[2,95]),o($VX,$VY,{44:$VA}),o($VX,[2,97]),o($VX,[2,98]),{19:65,27:115,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($VZ,[2,67],{19:65,68:116,69:117,27:119,30:$V_,44:$Vp,70:$V$,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx}),{36:[1,121]},{23:[1,122]},{19:65,27:123,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{30:[1,124]},{24:127,28:128,30:$VE,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,66:125,67:126},{8:[2,21],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},o($Vy,[2,34]),{19:65,27:129,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:130,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:131,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{45:[1,132],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{45:[1,133],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{45:[1,134],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{44:[1,135]},{2:$V0,6:39,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,24:18,28:19,29:$V2,30:$V3,32:$V4,33:$V5,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,49:[1,136],50:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,63:$Vh,64:$Vi},{8:[1,139],19:65,27:138,30:$Vo,44:$Vp,60:137,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{8:[1,140]},o($V01,[2,51]),{25:49,30:[1,141]},o($Vy,$Vz),o($VX,[2,71]),o($VX,[2,72]),{19:65,27:142,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:143,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:144,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:145,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:146,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:147,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:148,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:149,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:150,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:151,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:152,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:153,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:154,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:155,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:156,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:157,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($VX,[2,89]),o($VX,[2,90]),{45:[1,158],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{22:[1,160],45:[1,159]},o($VZ,[2,66]),o([22,45,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88],$VY,{26:[1,161],44:$VA}),o($VZ,[2,69],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW}),{30:[1,162]},{30:[2,26]},o($VB,[2,18]),{8:[2,20],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},o($VC,[2,36]),{22:[1,164],45:[1,163]},o($VZ,[2,62]),{30:[1,165]},o($Vk,$Vl,{42:$Vm}),{8:[2,22],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{8:[2,23],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{8:[2,24],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{46:166,48:$Vn},{48:[1,167]},{46:168,48:$Vn},{19:65,27:169,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o([2,5,20,29,30,32,33,37,38,39,40,41,43,47,49,50,53,55,56,57,58,62,63,64],[2,41]),{19:65,27:171,30:$Vo,44:$Vp,45:[2,55],61:170,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{8:[1,172],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},o($V11,[2,53]),o($V01,[2,50]),o($VC,$VD),o($V21,[2,73],{75:$VJ,76:$VK,77:$VL,78:$VM}),o($V21,[2,74],{75:$VJ,76:$VK,77:$VL,78:$VM}),o($V31,[2,75],{78:$VM}),o($V31,[2,76],{78:$VM}),o($V31,[2,77],{78:$VM}),o($V31,[2,78],{78:$VM}),o([8,22,45,54,71,72,79,80,81],[2,79],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW}),o([8,22,45,54,71,72,80,81],[2,80],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW}),o([8,22,45,54,71,72,81],[2,81],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW}),o($V41,[2,82],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM}),o($V41,[2,83],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM}),o($V41,[2,84],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM}),o($V41,[2,85],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM}),o($V41,[2,86],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,82:$VQ,83:$VR,84:$VS,85:$VT}),o($V41,[2,87],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,82:$VQ,83:$VR,84:$VS,85:$VT}),o($V41,[2,88],{73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,82:$VQ,83:$VR,84:$VS,85:$VT}),o($VX,[2,99]),o($VX,[2,64]),{19:65,27:119,30:$V_,44:$Vp,69:173,70:$V$,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{19:65,27:174,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},o($VZ,[2,70]),{46:175,48:$Vn},{24:127,28:128,30:$VE,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,67:176},o($VZ,[2,63]),o($Vj,[2,38],{47:[1,177]}),{51:178,52:179,53:$V51,55:$V61},o($Vj,[2,47]),{45:[1,182],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{45:[1,183]},{45:[2,54],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},o($V11,[2,52]),o($VZ,[2,65]),o($VZ,[2,68],{71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW}),o($Vj,[2,60]),o($VZ,[2,61]),{10:184,43:$Vb,46:185,48:$Vn},{49:[1,186],52:187,53:$V51,55:$V61},o($V71,[2,44]),{19:65,27:188,30:$Vo,44:$Vp,74:$Vq,89:$Vr,90:$Vs,91:$Vt,92:$Vu,93:$Vv,94:$Vw,95:$Vx},{54:[1,189]},o($Vj,[2,48]),{46:190,48:$Vn},o($Vj,[2,39]),o($Vj,[2,40]),o($Vj,[2,42]),o($V71,[2,43]),{54:[1,191],71:$VF,72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,86:$VU,87:$VV,88:$VW},{2:$V0,4:192,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,24:18,28:19,29:$V2,30:$V3,32:$V4,33:$V5,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,63:$Vh,64:$Vi},o($Vj,[2,49]),{2:$V0,4:193,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,20:$V1,24:18,28:19,29:$V2,30:$V3,32:$V4,33:$V5,34:32,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,63:$Vh,64:$Vi},o($V71,[2,46],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,24:18,28:19,34:32,6:39,2:$V0,20:$V1,29:$V2,30:$V3,32:$V4,33:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,63:$Vh,64:$Vi}),o($V71,[2,45],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,24:18,28:19,34:32,6:39,2:$V0,20:$V1,29:$V2,30:$V3,32:$V4,33:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,43:$Vb,50:$Vc,56:$Vd,57:$Ve,58:$Vf,62:$Vg,63:$Vh,64:$Vi})],
defaultActions: {28:[2,56],29:[2,57],38:[2,1],121:[2,26]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
break;
case 1:
break;
case 2:
                                            console.log("comment one line");
                                            //console.log(yy_.yytext);
                                        
break;
case 3:
                                            console.log("comment ML");
                                            //console.log(yy_.yytext);
                                        
break;
case 4:return 'NULL';
break;
case 5:return 37;
break;
case 6:return 38;
break;
case 7:return 39;
break;
case 8:return 40;
break;
case 9:return 20;
break;
case 10:return 29;
break;
case 11:return 32;
break;
case 12:return 33;
break;
case 13:return 92;
break;
case 14:return 93;
break;
case 15:return 43;
break;
case 16:return 47;
break;
case 17:return 50;
break;
case 18:return 53;
break;
case 19:return 55;
break;
case 20:return 62;
break;
case 21:return 63;
break;
case 22:return 64;
break;
case 23:return 'PRINT';
break;
case 24:return 'PUBLIC';
break;
case 25:return 'PRIVATE';
break;
case 26:return 41;
break;
case 27:return 58;
break;
case 28:return 56;
break;
case 29:return 'DEFINE';
break;
case 30:return 'AS';
break;
case 31:return 'STRC';
break;
case 32:return 57;
break;
case 33:return 'TRY';
break;
case 34:return 'CATCH';
break;
case 35:return 'THROW';
break;
case 36:return 22;
break;
case 37:return 42;
break;
case 38:return 8;
break;
case 39:return 44;
break;
case 40:return 45;
break;
case 41:return 35;
break;
case 42:return 36;
break;
case 43:return 48;
break;
case 44:return 49;
break;
case 45:return 31;
break;
case 46:return 54;
break;
case 47:return 71;
break;
case 48:return 73;
break;
case 49:return 72;
break;
case 50:return 74;
break;
case 51:return 75;
break;
case 52:return 76;
break;
case 53:return 77;
break;
case 54:return 78;
break;
case 55:return 79;
break;
case 56:return 80;
break;
case 57:return 81;
break;
case 58:return 87;
break;
case 59:return 86;
break;
case 60:return 88;
break;
case 61:return 82;
break;
case 62:return 83;
break;
case 63:return 26;
break;
case 64:return 85;
break;
case 65:return 84;
break;
case 66:return 89;
break;
case 67: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 94; 
							
break;
case 68: 
								yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 95; 
							
break;
case 69:return 91;
break;
case 70:return 90;
break;
case 71:return 23;
break;
case 72:return 30;
break;
case 73:return 5;
break;
case 74: 
								console.error('Error L√©xico: ' + yy_.yytext + 
								', en la linea: ' + yy_.yylloc.first_line + ', y la columna: ' + yy_.yylloc.first_column); 
							
break;
}
},
rules: [/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:null\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:import\b)/i,/^(?:var\b)/i,/^(?:const\b)/i,/^(?:global\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:print\b)/i,/^(?:public\b)/i,/^(?:private\b)/i,/^(?:void\b)/i,/^(?:for\b)/i,/^(?:while\b)/i,/^(?:define\b)/i,/^(?:as\b)/i,/^(?:strc\b)/i,/^(?:do\b)/i,/^(?:try\b)/i,/^(?:catch\b)/i,/^(?:throw\b)/i,/^(?:,)/i,/^(?:\.)/i,/^(?:;)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?::=)/i,/^(?::)/i,/^(?:\+\+)/i,/^(?:\+)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^\^)/i,/^(?:\^)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:===)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:!)/i,/^(?:"[^\"]*")/i,/^(?:'[a-zA-Z√±√ë^\']')/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z0-9\.\-√±√ë])+[j])/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_√±√ë]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsharp;
exports.Parser = jsharp.Parser;
exports.parse = function () { return jsharp.parse.apply(jsharp, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}